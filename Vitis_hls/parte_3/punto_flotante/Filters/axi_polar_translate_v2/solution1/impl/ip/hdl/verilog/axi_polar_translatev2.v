// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_polar_translatev2_axi_polar_translatev2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1089,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15547,HLS_SYN_LUT=21941,HLS_VERSION=2020_2}" *)

module axi_polar_translatev2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_V_TDATA,
        in_data_V_TVALID,
        in_data_V_TREADY,
        out_modulus_V_TDATA,
        out_modulus_V_TVALID,
        out_modulus_V_TREADY,
        out_phase_V_TDATA,
        out_phase_V_TVALID,
        out_phase_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state67 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_data_V_TDATA;
input   in_data_V_TVALID;
output   in_data_V_TREADY;
output  [31:0] out_modulus_V_TDATA;
output   out_modulus_V_TVALID;
input   out_modulus_V_TREADY;
output  [31:0] out_phase_V_TDATA;
output   out_phase_V_TVALID;
input   out_phase_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    out_modulus_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    out_phase_V_TDATA_blk_n;
reg   [9:0] inc9_reg_78;
wire   [9:0] add_ln26_fu_112_p2;
reg   [9:0] add_ln26_reg_162;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
reg    ap_block_state65_pp0_stage0_iter63;
reg    ap_block_state65_io;
reg    ap_block_state66_pp0_stage0_iter64;
reg    ap_block_state66_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_M_value_fu_122_p1;
wire   [31:0] tmp_M_value_1_fu_139_p1;
wire   [0:0] icmp_ln26_fu_146_p2;
reg   [0:0] icmp_ln26_reg_181;
wire   [31:0] grp_fu_99_p2;
reg   [31:0] mul_reg_185;
wire   [31:0] grp_fu_103_p2;
reg   [31:0] mul4_reg_190;
wire   [31:0] grp_fu_95_p2;
reg   [31:0] x_assign_reg_195;
reg   [31:0] x_assign_reg_195_pp0_iter9_reg;
reg   [31:0] x_assign_reg_195_pp0_iter10_reg;
reg   [31:0] x_assign_reg_195_pp0_iter11_reg;
reg   [31:0] x_assign_reg_195_pp0_iter12_reg;
reg   [31:0] x_assign_reg_195_pp0_iter13_reg;
reg   [31:0] x_assign_reg_195_pp0_iter14_reg;
reg   [31:0] x_assign_reg_195_pp0_iter15_reg;
reg   [31:0] x_assign_reg_195_pp0_iter16_reg;
reg   [31:0] x_assign_reg_195_pp0_iter17_reg;
reg   [31:0] x_assign_reg_195_pp0_iter18_reg;
reg   [31:0] x_assign_reg_195_pp0_iter19_reg;
reg   [31:0] x_assign_reg_195_pp0_iter20_reg;
reg   [31:0] x_assign_reg_195_pp0_iter21_reg;
reg   [31:0] x_assign_reg_195_pp0_iter22_reg;
reg   [31:0] x_assign_reg_195_pp0_iter23_reg;
reg   [31:0] x_assign_reg_195_pp0_iter24_reg;
reg   [31:0] x_assign_reg_195_pp0_iter25_reg;
reg   [31:0] x_assign_reg_195_pp0_iter26_reg;
reg   [31:0] x_assign_reg_195_pp0_iter27_reg;
reg   [31:0] x_assign_reg_195_pp0_iter28_reg;
reg   [31:0] x_assign_reg_195_pp0_iter29_reg;
reg   [31:0] x_assign_reg_195_pp0_iter30_reg;
reg   [31:0] x_assign_reg_195_pp0_iter31_reg;
reg   [31:0] x_assign_reg_195_pp0_iter32_reg;
reg   [31:0] x_assign_reg_195_pp0_iter33_reg;
reg   [31:0] x_assign_reg_195_pp0_iter34_reg;
reg   [31:0] x_assign_reg_195_pp0_iter35_reg;
reg   [31:0] x_assign_reg_195_pp0_iter36_reg;
reg   [31:0] x_assign_reg_195_pp0_iter37_reg;
reg   [31:0] x_assign_reg_195_pp0_iter38_reg;
reg   [31:0] x_assign_reg_195_pp0_iter39_reg;
reg   [31:0] x_assign_reg_195_pp0_iter40_reg;
reg   [31:0] x_assign_reg_195_pp0_iter41_reg;
reg   [31:0] x_assign_reg_195_pp0_iter42_reg;
reg   [31:0] x_assign_reg_195_pp0_iter43_reg;
reg   [31:0] x_assign_reg_195_pp0_iter44_reg;
reg   [31:0] x_assign_reg_195_pp0_iter45_reg;
reg   [31:0] x_assign_reg_195_pp0_iter46_reg;
reg   [31:0] x_assign_reg_195_pp0_iter47_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
wire   [31:0] grp_atan2_cordic_float_s_fu_89_ap_return;
reg    grp_atan2_cordic_float_s_fu_89_ap_ce;
reg    ap_block_state2_pp0_stage0_iter0_ignore_call13;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call13;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call13;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call13;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call13;
wire    ap_block_state7_pp0_stage0_iter5_ignore_call13;
wire    ap_block_state8_pp0_stage0_iter6_ignore_call13;
wire    ap_block_state9_pp0_stage0_iter7_ignore_call13;
wire    ap_block_state10_pp0_stage0_iter8_ignore_call13;
wire    ap_block_state11_pp0_stage0_iter9_ignore_call13;
wire    ap_block_state12_pp0_stage0_iter10_ignore_call13;
wire    ap_block_state13_pp0_stage0_iter11_ignore_call13;
wire    ap_block_state14_pp0_stage0_iter12_ignore_call13;
wire    ap_block_state15_pp0_stage0_iter13_ignore_call13;
wire    ap_block_state16_pp0_stage0_iter14_ignore_call13;
wire    ap_block_state17_pp0_stage0_iter15_ignore_call13;
wire    ap_block_state18_pp0_stage0_iter16_ignore_call13;
wire    ap_block_state19_pp0_stage0_iter17_ignore_call13;
wire    ap_block_state20_pp0_stage0_iter18_ignore_call13;
wire    ap_block_state21_pp0_stage0_iter19_ignore_call13;
wire    ap_block_state22_pp0_stage0_iter20_ignore_call13;
wire    ap_block_state23_pp0_stage0_iter21_ignore_call13;
wire    ap_block_state24_pp0_stage0_iter22_ignore_call13;
wire    ap_block_state25_pp0_stage0_iter23_ignore_call13;
wire    ap_block_state26_pp0_stage0_iter24_ignore_call13;
wire    ap_block_state27_pp0_stage0_iter25_ignore_call13;
wire    ap_block_state28_pp0_stage0_iter26_ignore_call13;
wire    ap_block_state29_pp0_stage0_iter27_ignore_call13;
wire    ap_block_state30_pp0_stage0_iter28_ignore_call13;
wire    ap_block_state31_pp0_stage0_iter29_ignore_call13;
wire    ap_block_state32_pp0_stage0_iter30_ignore_call13;
wire    ap_block_state33_pp0_stage0_iter31_ignore_call13;
wire    ap_block_state34_pp0_stage0_iter32_ignore_call13;
wire    ap_block_state35_pp0_stage0_iter33_ignore_call13;
wire    ap_block_state36_pp0_stage0_iter34_ignore_call13;
wire    ap_block_state37_pp0_stage0_iter35_ignore_call13;
wire    ap_block_state38_pp0_stage0_iter36_ignore_call13;
wire    ap_block_state39_pp0_stage0_iter37_ignore_call13;
wire    ap_block_state40_pp0_stage0_iter38_ignore_call13;
wire    ap_block_state41_pp0_stage0_iter39_ignore_call13;
wire    ap_block_state42_pp0_stage0_iter40_ignore_call13;
wire    ap_block_state43_pp0_stage0_iter41_ignore_call13;
wire    ap_block_state44_pp0_stage0_iter42_ignore_call13;
wire    ap_block_state45_pp0_stage0_iter43_ignore_call13;
wire    ap_block_state46_pp0_stage0_iter44_ignore_call13;
wire    ap_block_state47_pp0_stage0_iter45_ignore_call13;
wire    ap_block_state48_pp0_stage0_iter46_ignore_call13;
wire    ap_block_state49_pp0_stage0_iter47_ignore_call13;
wire    ap_block_state50_pp0_stage0_iter48_ignore_call13;
wire    ap_block_state51_pp0_stage0_iter49_ignore_call13;
wire    ap_block_state52_pp0_stage0_iter50_ignore_call13;
wire    ap_block_state53_pp0_stage0_iter51_ignore_call13;
wire    ap_block_state54_pp0_stage0_iter52_ignore_call13;
wire    ap_block_state55_pp0_stage0_iter53_ignore_call13;
wire    ap_block_state56_pp0_stage0_iter54_ignore_call13;
wire    ap_block_state57_pp0_stage0_iter55_ignore_call13;
wire    ap_block_state58_pp0_stage0_iter56_ignore_call13;
wire    ap_block_state59_pp0_stage0_iter57_ignore_call13;
wire    ap_block_state60_pp0_stage0_iter58_ignore_call13;
wire    ap_block_state61_pp0_stage0_iter59_ignore_call13;
wire    ap_block_state62_pp0_stage0_iter60_ignore_call13;
wire    ap_block_state63_pp0_stage0_iter61_ignore_call13;
wire    ap_block_state64_pp0_stage0_iter62_ignore_call13;
reg    ap_block_state65_pp0_stage0_iter63_ignore_call13;
reg    ap_block_state66_pp0_stage0_iter64_ignore_call13;
reg    ap_block_pp0_stage0_11001_ignoreCallOp85;
reg   [9:0] ap_phi_mux_inc9_phi_fu_82_p4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] trunc_ln145_fu_118_p1;
wire   [31:0] trunc_ln145_1_fu_129_p4;
wire   [31:0] grp_fu_107_p2;
reg    grp_fu_95_ce;
reg    grp_fu_99_ce;
reg    grp_fu_103_ce;
reg    grp_fu_107_ce;
wire    ap_CS_fsm_state67;
wire    regslice_both_out_modulus_V_U_apdone_blk;
wire    regslice_both_out_phase_V_U_apdone_blk;
reg    ap_block_state67;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [63:0] in_data_V_TDATA_int_regslice;
wire    in_data_V_TVALID_int_regslice;
reg    in_data_V_TREADY_int_regslice;
wire    regslice_both_in_data_V_U_ack_in;
wire   [31:0] out_modulus_V_TDATA_int_regslice;
reg    out_modulus_V_TVALID_int_regslice;
wire    out_modulus_V_TREADY_int_regslice;
wire    regslice_both_out_modulus_V_U_vld_out;
wire   [31:0] out_phase_V_TDATA_int_regslice;
reg    out_phase_V_TVALID_int_regslice;
wire    out_phase_V_TREADY_int_regslice;
wire    regslice_both_out_phase_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
end

axi_polar_translatev2_atan2_cordic_float_s grp_atan2_cordic_float_s_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .y_in(tmp_M_value_1_fu_139_p1),
    .x_in(tmp_M_value_fu_122_p1),
    .ap_return(grp_atan2_cordic_float_s_fu_89_ap_return),
    .ap_ce(grp_atan2_cordic_float_s_fu_89_ap_ce)
);

axi_polar_translatev2_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_reg_185),
    .din1(mul4_reg_190),
    .ce(grp_fu_95_ce),
    .dout(grp_fu_95_p2)
);

axi_polar_translatev2_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_M_value_fu_122_p1),
    .din1(tmp_M_value_fu_122_p1),
    .ce(grp_fu_99_ce),
    .dout(grp_fu_99_p2)
);

axi_polar_translatev2_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_M_value_1_fu_139_p1),
    .din1(tmp_M_value_1_fu_139_p1),
    .ce(grp_fu_103_ce),
    .dout(grp_fu_103_p2)
);

axi_polar_translatev2_fsqrt_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_16_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(x_assign_reg_195_pp0_iter47_reg),
    .ce(grp_fu_107_ce),
    .dout(grp_fu_107_p2)
);

axi_polar_translatev2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_V_TDATA),
    .vld_in(in_data_V_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in_data_V_TDATA_int_regslice),
    .vld_out(in_data_V_TVALID_int_regslice),
    .ack_out(in_data_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

axi_polar_translatev2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_modulus_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_modulus_V_TDATA_int_regslice),
    .vld_in(out_modulus_V_TVALID_int_regslice),
    .ack_in(out_modulus_V_TREADY_int_regslice),
    .data_out(out_modulus_V_TDATA),
    .vld_out(regslice_both_out_modulus_V_U_vld_out),
    .ack_out(out_modulus_V_TREADY),
    .apdone_blk(regslice_both_out_modulus_V_U_apdone_blk)
);

axi_polar_translatev2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_phase_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_phase_V_TDATA_int_regslice),
    .vld_in(out_phase_V_TVALID_int_regslice),
    .ack_in(out_phase_V_TREADY_int_regslice),
    .data_out(out_phase_V_TDATA),
    .vld_out(regslice_both_out_phase_V_U_vld_out),
    .ack_out(out_phase_V_TREADY),
    .apdone_blk(regslice_both_out_phase_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter64 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inc9_reg_78 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln26_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inc9_reg_78 <= add_ln26_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_reg_162 <= add_ln26_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_181 <= icmp_ln26_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul4_reg_190 <= grp_fu_103_p2;
        mul_reg_185 <= grp_fu_99_p2;
        x_assign_reg_195 <= grp_fu_95_p2;
        x_assign_reg_195_pp0_iter10_reg <= x_assign_reg_195_pp0_iter9_reg;
        x_assign_reg_195_pp0_iter11_reg <= x_assign_reg_195_pp0_iter10_reg;
        x_assign_reg_195_pp0_iter12_reg <= x_assign_reg_195_pp0_iter11_reg;
        x_assign_reg_195_pp0_iter13_reg <= x_assign_reg_195_pp0_iter12_reg;
        x_assign_reg_195_pp0_iter14_reg <= x_assign_reg_195_pp0_iter13_reg;
        x_assign_reg_195_pp0_iter15_reg <= x_assign_reg_195_pp0_iter14_reg;
        x_assign_reg_195_pp0_iter16_reg <= x_assign_reg_195_pp0_iter15_reg;
        x_assign_reg_195_pp0_iter17_reg <= x_assign_reg_195_pp0_iter16_reg;
        x_assign_reg_195_pp0_iter18_reg <= x_assign_reg_195_pp0_iter17_reg;
        x_assign_reg_195_pp0_iter19_reg <= x_assign_reg_195_pp0_iter18_reg;
        x_assign_reg_195_pp0_iter20_reg <= x_assign_reg_195_pp0_iter19_reg;
        x_assign_reg_195_pp0_iter21_reg <= x_assign_reg_195_pp0_iter20_reg;
        x_assign_reg_195_pp0_iter22_reg <= x_assign_reg_195_pp0_iter21_reg;
        x_assign_reg_195_pp0_iter23_reg <= x_assign_reg_195_pp0_iter22_reg;
        x_assign_reg_195_pp0_iter24_reg <= x_assign_reg_195_pp0_iter23_reg;
        x_assign_reg_195_pp0_iter25_reg <= x_assign_reg_195_pp0_iter24_reg;
        x_assign_reg_195_pp0_iter26_reg <= x_assign_reg_195_pp0_iter25_reg;
        x_assign_reg_195_pp0_iter27_reg <= x_assign_reg_195_pp0_iter26_reg;
        x_assign_reg_195_pp0_iter28_reg <= x_assign_reg_195_pp0_iter27_reg;
        x_assign_reg_195_pp0_iter29_reg <= x_assign_reg_195_pp0_iter28_reg;
        x_assign_reg_195_pp0_iter30_reg <= x_assign_reg_195_pp0_iter29_reg;
        x_assign_reg_195_pp0_iter31_reg <= x_assign_reg_195_pp0_iter30_reg;
        x_assign_reg_195_pp0_iter32_reg <= x_assign_reg_195_pp0_iter31_reg;
        x_assign_reg_195_pp0_iter33_reg <= x_assign_reg_195_pp0_iter32_reg;
        x_assign_reg_195_pp0_iter34_reg <= x_assign_reg_195_pp0_iter33_reg;
        x_assign_reg_195_pp0_iter35_reg <= x_assign_reg_195_pp0_iter34_reg;
        x_assign_reg_195_pp0_iter36_reg <= x_assign_reg_195_pp0_iter35_reg;
        x_assign_reg_195_pp0_iter37_reg <= x_assign_reg_195_pp0_iter36_reg;
        x_assign_reg_195_pp0_iter38_reg <= x_assign_reg_195_pp0_iter37_reg;
        x_assign_reg_195_pp0_iter39_reg <= x_assign_reg_195_pp0_iter38_reg;
        x_assign_reg_195_pp0_iter40_reg <= x_assign_reg_195_pp0_iter39_reg;
        x_assign_reg_195_pp0_iter41_reg <= x_assign_reg_195_pp0_iter40_reg;
        x_assign_reg_195_pp0_iter42_reg <= x_assign_reg_195_pp0_iter41_reg;
        x_assign_reg_195_pp0_iter43_reg <= x_assign_reg_195_pp0_iter42_reg;
        x_assign_reg_195_pp0_iter44_reg <= x_assign_reg_195_pp0_iter43_reg;
        x_assign_reg_195_pp0_iter45_reg <= x_assign_reg_195_pp0_iter44_reg;
        x_assign_reg_195_pp0_iter46_reg <= x_assign_reg_195_pp0_iter45_reg;
        x_assign_reg_195_pp0_iter47_reg <= x_assign_reg_195_pp0_iter46_reg;
        x_assign_reg_195_pp0_iter9_reg <= x_assign_reg_195;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_phase_V_U_apdone_blk == 1'b1) | (regslice_both_out_modulus_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln26_reg_181 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_inc9_phi_fu_82_p4 = add_ln26_reg_162;
    end else begin
        ap_phi_mux_inc9_phi_fu_82_p4 = inc9_reg_78;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_phase_V_U_apdone_blk == 1'b1) | (regslice_both_out_modulus_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp85) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_atan2_cordic_float_s_fu_89_ap_ce = 1'b1;
    end else begin
        grp_atan2_cordic_float_s_fu_89_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_103_ce = 1'b1;
    end else begin
        grp_fu_103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_107_ce = 1'b1;
    end else begin
        grp_fu_107_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_95_ce = 1'b1;
    end else begin
        grp_fu_95_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_99_ce = 1'b1;
    end else begin
        grp_fu_99_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_V_TDATA_blk_n = in_data_V_TVALID_int_regslice;
    end else begin
        in_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_data_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter64 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter63 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_modulus_V_TDATA_blk_n = out_modulus_V_TREADY_int_regslice;
    end else begin
        out_modulus_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter63 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_modulus_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_modulus_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter64 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter63 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_phase_V_TDATA_blk_n = out_phase_V_TREADY_int_regslice;
    end else begin
        out_phase_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter63 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_phase_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_phase_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter64 == 1'b1) & (ap_enable_reg_pp0_iter63 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter64 == 1'b1) & (ap_enable_reg_pp0_iter63 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state67 : begin
            if ((~((regslice_both_out_phase_V_U_apdone_blk == 1'b1) | (regslice_both_out_modulus_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_112_p2 = (ap_phi_mux_inc9_phi_fu_82_p4 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((in_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter64 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter63 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((in_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter64 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state66_io))) | ((ap_enable_reg_pp0_iter63 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state65_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp85 = (((in_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter64 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state66_io))) | ((ap_enable_reg_pp0_iter63 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state65_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((in_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter64 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state66_io))) | ((ap_enable_reg_pp0_iter63 == 1'b1) & ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state65_io))));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (in_data_V_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0_ignore_call13 = (in_data_V_TVALID_int_regslice == 1'b0);
end

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65_io = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state65_pp0_stage0_iter63 = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state65_pp0_stage0_iter63_ignore_call13 = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state66_io = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state66_pp0_stage0_iter64 = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state66_pp0_stage0_iter64_ignore_call13 = ((out_phase_V_TREADY_int_regslice == 1'b0) | (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state67 = ((regslice_both_out_phase_V_U_apdone_blk == 1'b1) | (regslice_both_out_modulus_V_U_apdone_blk == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln26_fu_146_p2 = ((ap_phi_mux_inc9_phi_fu_82_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign in_data_V_TREADY = regslice_both_in_data_V_U_ack_in;

assign out_modulus_V_TDATA_int_regslice = grp_fu_107_p2;

assign out_modulus_V_TVALID = regslice_both_out_modulus_V_U_vld_out;

assign out_phase_V_TDATA_int_regslice = grp_atan2_cordic_float_s_fu_89_ap_return;

assign out_phase_V_TVALID = regslice_both_out_phase_V_U_vld_out;

assign tmp_M_value_1_fu_139_p1 = trunc_ln145_1_fu_129_p4;

assign tmp_M_value_fu_122_p1 = trunc_ln145_fu_118_p1;

assign trunc_ln145_1_fu_129_p4 = {{in_data_V_TDATA_int_regslice[63:32]}};

assign trunc_ln145_fu_118_p1 = in_data_V_TDATA_int_regslice[31:0];

endmodule //axi_polar_translatev2
