-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_phase is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_complex_data_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_complex_data_V_TVALID : IN STD_LOGIC;
    in_complex_data_V_TREADY : OUT STD_LOGIC;
    out_phase_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_phase_V_TVALID : OUT STD_LOGIC;
    out_phase_V_TREADY : IN STD_LOGIC );
end;


architecture behav of axi_phase is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_phase_axi_phase,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1090,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15016,HLS_SYN_LUT=20904,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_complex_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln12_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_phase_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal icmp_ln12_reg_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal icmp_ln12_reg_128_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_67 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_84_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state66_io : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln12_reg_128_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_128_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_1_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal grp_atan2_cordic_float_s_fu_78_y_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_atan2_cordic_float_s_fu_78_x_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_atan2_cordic_float_s_fu_78_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_atan2_cordic_float_s_fu_78_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call6 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call6 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call6 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4_ignore_call6 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5_ignore_call6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6_ignore_call6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7_ignore_call6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8_ignore_call6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9_ignore_call6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10_ignore_call6 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11_ignore_call6 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12_ignore_call6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13_ignore_call6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14_ignore_call6 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15_ignore_call6 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16_ignore_call6 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17_ignore_call6 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18_ignore_call6 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19_ignore_call6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20_ignore_call6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21_ignore_call6 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22_ignore_call6 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23_ignore_call6 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24_ignore_call6 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25_ignore_call6 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26_ignore_call6 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27_ignore_call6 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28_ignore_call6 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29_ignore_call6 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30_ignore_call6 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31_ignore_call6 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32_ignore_call6 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33_ignore_call6 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34_ignore_call6 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35_ignore_call6 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36_ignore_call6 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37_ignore_call6 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38_ignore_call6 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39_ignore_call6 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40_ignore_call6 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41_ignore_call6 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42_ignore_call6 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43_ignore_call6 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44_ignore_call6 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter45_ignore_call6 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter46_ignore_call6 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter47_ignore_call6 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter48_ignore_call6 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter49_ignore_call6 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter50_ignore_call6 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter51_ignore_call6 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter52_ignore_call6 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter53_ignore_call6 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter54_ignore_call6 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter55_ignore_call6 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter56_ignore_call6 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter57_ignore_call6 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter58_ignore_call6 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter59_ignore_call6 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter60_ignore_call6 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter61_ignore_call6 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter62_ignore_call6 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter63_ignore_call6 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter64_ignore_call6 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter65_ignore_call6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp86 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal regslice_both_out_phase_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in_complex_data_V_U_apdone_blk : STD_LOGIC;
    signal in_complex_data_V_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal in_complex_data_V_TVALID_int_regslice : STD_LOGIC;
    signal in_complex_data_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_complex_data_V_U_ack_in : STD_LOGIC;
    signal out_phase_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_phase_V_TVALID_int_regslice : STD_LOGIC;
    signal out_phase_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_phase_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axi_phase_atan2_cordic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        y_in : IN STD_LOGIC_VECTOR (31 downto 0);
        x_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component axi_phase_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_atan2_cordic_float_s_fu_78 : component axi_phase_atan2_cordic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        y_in => grp_atan2_cordic_float_s_fu_78_y_in,
        x_in => grp_atan2_cordic_float_s_fu_78_x_in,
        ap_return => grp_atan2_cordic_float_s_fu_78_ap_return,
        ap_ce => grp_atan2_cordic_float_s_fu_78_ap_ce);

    regslice_both_in_complex_data_V_U : component axi_phase_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_complex_data_V_TDATA,
        vld_in => in_complex_data_V_TVALID,
        ack_in => regslice_both_in_complex_data_V_U_ack_in,
        data_out => in_complex_data_V_TDATA_int_regslice,
        vld_out => in_complex_data_V_TVALID_int_regslice,
        ack_out => in_complex_data_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in_complex_data_V_U_apdone_blk);

    regslice_both_out_phase_V_U : component axi_phase_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_phase_V_TDATA_int_regslice,
        vld_in => out_phase_V_TVALID_int_regslice,
        ack_in => out_phase_V_TREADY_int_regslice,
        data_out => out_phase_V_TDATA,
        vld_out => regslice_both_out_phase_V_U_vld_out,
        ack_out => out_phase_V_TREADY,
        apdone_blk => regslice_both_out_phase_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_67 <= i_1_fu_84_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_67 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_reg_128 <= icmp_ln12_fu_90_p2;
                icmp_ln12_reg_128_pp0_iter1_reg <= icmp_ln12_reg_128;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln12_reg_128_pp0_iter10_reg <= icmp_ln12_reg_128_pp0_iter9_reg;
                icmp_ln12_reg_128_pp0_iter11_reg <= icmp_ln12_reg_128_pp0_iter10_reg;
                icmp_ln12_reg_128_pp0_iter12_reg <= icmp_ln12_reg_128_pp0_iter11_reg;
                icmp_ln12_reg_128_pp0_iter13_reg <= icmp_ln12_reg_128_pp0_iter12_reg;
                icmp_ln12_reg_128_pp0_iter14_reg <= icmp_ln12_reg_128_pp0_iter13_reg;
                icmp_ln12_reg_128_pp0_iter15_reg <= icmp_ln12_reg_128_pp0_iter14_reg;
                icmp_ln12_reg_128_pp0_iter16_reg <= icmp_ln12_reg_128_pp0_iter15_reg;
                icmp_ln12_reg_128_pp0_iter17_reg <= icmp_ln12_reg_128_pp0_iter16_reg;
                icmp_ln12_reg_128_pp0_iter18_reg <= icmp_ln12_reg_128_pp0_iter17_reg;
                icmp_ln12_reg_128_pp0_iter19_reg <= icmp_ln12_reg_128_pp0_iter18_reg;
                icmp_ln12_reg_128_pp0_iter20_reg <= icmp_ln12_reg_128_pp0_iter19_reg;
                icmp_ln12_reg_128_pp0_iter21_reg <= icmp_ln12_reg_128_pp0_iter20_reg;
                icmp_ln12_reg_128_pp0_iter22_reg <= icmp_ln12_reg_128_pp0_iter21_reg;
                icmp_ln12_reg_128_pp0_iter23_reg <= icmp_ln12_reg_128_pp0_iter22_reg;
                icmp_ln12_reg_128_pp0_iter24_reg <= icmp_ln12_reg_128_pp0_iter23_reg;
                icmp_ln12_reg_128_pp0_iter25_reg <= icmp_ln12_reg_128_pp0_iter24_reg;
                icmp_ln12_reg_128_pp0_iter26_reg <= icmp_ln12_reg_128_pp0_iter25_reg;
                icmp_ln12_reg_128_pp0_iter27_reg <= icmp_ln12_reg_128_pp0_iter26_reg;
                icmp_ln12_reg_128_pp0_iter28_reg <= icmp_ln12_reg_128_pp0_iter27_reg;
                icmp_ln12_reg_128_pp0_iter29_reg <= icmp_ln12_reg_128_pp0_iter28_reg;
                icmp_ln12_reg_128_pp0_iter2_reg <= icmp_ln12_reg_128_pp0_iter1_reg;
                icmp_ln12_reg_128_pp0_iter30_reg <= icmp_ln12_reg_128_pp0_iter29_reg;
                icmp_ln12_reg_128_pp0_iter31_reg <= icmp_ln12_reg_128_pp0_iter30_reg;
                icmp_ln12_reg_128_pp0_iter32_reg <= icmp_ln12_reg_128_pp0_iter31_reg;
                icmp_ln12_reg_128_pp0_iter33_reg <= icmp_ln12_reg_128_pp0_iter32_reg;
                icmp_ln12_reg_128_pp0_iter34_reg <= icmp_ln12_reg_128_pp0_iter33_reg;
                icmp_ln12_reg_128_pp0_iter35_reg <= icmp_ln12_reg_128_pp0_iter34_reg;
                icmp_ln12_reg_128_pp0_iter36_reg <= icmp_ln12_reg_128_pp0_iter35_reg;
                icmp_ln12_reg_128_pp0_iter37_reg <= icmp_ln12_reg_128_pp0_iter36_reg;
                icmp_ln12_reg_128_pp0_iter38_reg <= icmp_ln12_reg_128_pp0_iter37_reg;
                icmp_ln12_reg_128_pp0_iter39_reg <= icmp_ln12_reg_128_pp0_iter38_reg;
                icmp_ln12_reg_128_pp0_iter3_reg <= icmp_ln12_reg_128_pp0_iter2_reg;
                icmp_ln12_reg_128_pp0_iter40_reg <= icmp_ln12_reg_128_pp0_iter39_reg;
                icmp_ln12_reg_128_pp0_iter41_reg <= icmp_ln12_reg_128_pp0_iter40_reg;
                icmp_ln12_reg_128_pp0_iter42_reg <= icmp_ln12_reg_128_pp0_iter41_reg;
                icmp_ln12_reg_128_pp0_iter43_reg <= icmp_ln12_reg_128_pp0_iter42_reg;
                icmp_ln12_reg_128_pp0_iter44_reg <= icmp_ln12_reg_128_pp0_iter43_reg;
                icmp_ln12_reg_128_pp0_iter45_reg <= icmp_ln12_reg_128_pp0_iter44_reg;
                icmp_ln12_reg_128_pp0_iter46_reg <= icmp_ln12_reg_128_pp0_iter45_reg;
                icmp_ln12_reg_128_pp0_iter47_reg <= icmp_ln12_reg_128_pp0_iter46_reg;
                icmp_ln12_reg_128_pp0_iter48_reg <= icmp_ln12_reg_128_pp0_iter47_reg;
                icmp_ln12_reg_128_pp0_iter49_reg <= icmp_ln12_reg_128_pp0_iter48_reg;
                icmp_ln12_reg_128_pp0_iter4_reg <= icmp_ln12_reg_128_pp0_iter3_reg;
                icmp_ln12_reg_128_pp0_iter50_reg <= icmp_ln12_reg_128_pp0_iter49_reg;
                icmp_ln12_reg_128_pp0_iter51_reg <= icmp_ln12_reg_128_pp0_iter50_reg;
                icmp_ln12_reg_128_pp0_iter52_reg <= icmp_ln12_reg_128_pp0_iter51_reg;
                icmp_ln12_reg_128_pp0_iter53_reg <= icmp_ln12_reg_128_pp0_iter52_reg;
                icmp_ln12_reg_128_pp0_iter54_reg <= icmp_ln12_reg_128_pp0_iter53_reg;
                icmp_ln12_reg_128_pp0_iter55_reg <= icmp_ln12_reg_128_pp0_iter54_reg;
                icmp_ln12_reg_128_pp0_iter56_reg <= icmp_ln12_reg_128_pp0_iter55_reg;
                icmp_ln12_reg_128_pp0_iter57_reg <= icmp_ln12_reg_128_pp0_iter56_reg;
                icmp_ln12_reg_128_pp0_iter58_reg <= icmp_ln12_reg_128_pp0_iter57_reg;
                icmp_ln12_reg_128_pp0_iter59_reg <= icmp_ln12_reg_128_pp0_iter58_reg;
                icmp_ln12_reg_128_pp0_iter5_reg <= icmp_ln12_reg_128_pp0_iter4_reg;
                icmp_ln12_reg_128_pp0_iter60_reg <= icmp_ln12_reg_128_pp0_iter59_reg;
                icmp_ln12_reg_128_pp0_iter61_reg <= icmp_ln12_reg_128_pp0_iter60_reg;
                icmp_ln12_reg_128_pp0_iter62_reg <= icmp_ln12_reg_128_pp0_iter61_reg;
                icmp_ln12_reg_128_pp0_iter63_reg <= icmp_ln12_reg_128_pp0_iter62_reg;
                icmp_ln12_reg_128_pp0_iter64_reg <= icmp_ln12_reg_128_pp0_iter63_reg;
                icmp_ln12_reg_128_pp0_iter6_reg <= icmp_ln12_reg_128_pp0_iter5_reg;
                icmp_ln12_reg_128_pp0_iter7_reg <= icmp_ln12_reg_128_pp0_iter6_reg;
                icmp_ln12_reg_128_pp0_iter8_reg <= icmp_ln12_reg_128_pp0_iter7_reg;
                icmp_ln12_reg_128_pp0_iter9_reg <= icmp_ln12_reg_128_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln145_1_reg_137 <= in_complex_data_V_TDATA_int_regslice(63 downto 32);
                trunc_ln145_reg_132 <= trunc_ln145_fu_96_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state68, regslice_both_out_phase_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln12_fu_90_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter65 = ap_const_logic_1) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter65 = ap_const_logic_1) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln12_fu_90_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state68 => 
                if (((regslice_both_out_phase_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state68 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_enable_reg_pp0_iter65, icmp_ln12_reg_128_pp0_iter64_reg, in_complex_data_V_TVALID_int_regslice, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_1)) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_1)) or ((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_enable_reg_pp0_iter65, icmp_ln12_reg_128_pp0_iter64_reg, ap_block_state66_io, ap_block_state67_io, in_complex_data_V_TVALID_int_regslice, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter65 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state67_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter64 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state66_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp86_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_enable_reg_pp0_iter65, icmp_ln12_reg_128_pp0_iter64_reg, ap_block_state66_io, ap_block_state67_io, in_complex_data_V_TVALID_int_regslice, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp86 <= (((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter65 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state67_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter64 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state66_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_enable_reg_pp0_iter65, icmp_ln12_reg_128_pp0_iter64_reg, ap_block_state66_io, ap_block_state67_io, in_complex_data_V_TVALID_int_regslice, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter65 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state67_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp0_iter64 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state66_io) or ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln12_fu_90_p2, in_complex_data_V_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0));
    end process;


    ap_block_state2_pp0_stage0_iter0_ignore_call6_assign_proc : process(icmp_ln12_fu_90_p2, in_complex_data_V_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0_ignore_call6 <= ((in_complex_data_V_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln12_fu_90_p2 = ap_const_lv1_0));
    end process;

        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter38_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter43_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter44_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter45_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter46_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter47_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter48_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter49_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter50_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter51_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter52_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter53_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter54_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter55_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter56_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter57_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter58_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter59_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter60_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter61_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter62_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter63_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_io_assign_proc : process(icmp_ln12_reg_128_pp0_iter63_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state66_io <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0));
    end process;


    ap_block_state66_pp0_stage0_iter64_assign_proc : process(icmp_ln12_reg_128_pp0_iter63_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state66_pp0_stage0_iter64 <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0));
    end process;


    ap_block_state66_pp0_stage0_iter64_ignore_call6_assign_proc : process(icmp_ln12_reg_128_pp0_iter63_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state66_pp0_stage0_iter64_ignore_call6 <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0));
    end process;


    ap_block_state67_io_assign_proc : process(icmp_ln12_reg_128_pp0_iter64_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state67_io <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0));
    end process;


    ap_block_state67_pp0_stage0_iter65_assign_proc : process(icmp_ln12_reg_128_pp0_iter64_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state67_pp0_stage0_iter65 <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0));
    end process;


    ap_block_state67_pp0_stage0_iter65_ignore_call6_assign_proc : process(icmp_ln12_reg_128_pp0_iter64_reg, out_phase_V_TREADY_int_regslice)
    begin
                ap_block_state67_pp0_stage0_iter65_ignore_call6 <= ((out_phase_V_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7_ignore_call6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln12_fu_90_p2)
    begin
        if ((icmp_ln12_fu_90_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state68, regslice_both_out_phase_V_U_apdone_blk)
    begin
        if (((regslice_both_out_phase_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63)
    begin
        if (((ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state68, regslice_both_out_phase_V_U_apdone_blk)
    begin
        if (((regslice_both_out_phase_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_atan2_cordic_float_s_fu_78_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp86) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_atan2_cordic_float_s_fu_78_ap_ce <= ap_const_logic_1;
        else 
            grp_atan2_cordic_float_s_fu_78_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_atan2_cordic_float_s_fu_78_x_in <= trunc_ln145_reg_132;
    grp_atan2_cordic_float_s_fu_78_y_in <= trunc_ln145_1_reg_137;
    i_1_fu_84_p2 <= std_logic_vector(unsigned(i_reg_67) + unsigned(ap_const_lv11_1));
    icmp_ln12_fu_90_p2 <= "1" when (i_reg_67 = ap_const_lv11_400) else "0";

    in_complex_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln12_fu_90_p2, in_complex_data_V_TVALID_int_regslice)
    begin
        if (((icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_complex_data_V_TDATA_blk_n <= in_complex_data_V_TVALID_int_regslice;
        else 
            in_complex_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_complex_data_V_TREADY <= regslice_both_in_complex_data_V_U_ack_in;

    in_complex_data_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln12_fu_90_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln12_fu_90_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_complex_data_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_complex_data_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_phase_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_enable_reg_pp0_iter65, icmp_ln12_reg_128_pp0_iter64_reg, out_phase_V_TREADY_int_regslice)
    begin
        if ((((icmp_ln12_reg_128_pp0_iter64_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_phase_V_TDATA_blk_n <= out_phase_V_TREADY_int_regslice;
        else 
            out_phase_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_phase_V_TDATA_int_regslice <= grp_atan2_cordic_float_s_fu_78_ap_return;
    out_phase_V_TVALID <= regslice_both_out_phase_V_U_vld_out;

    out_phase_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter64, icmp_ln12_reg_128_pp0_iter63_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln12_reg_128_pp0_iter63_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_phase_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_phase_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln145_fu_96_p1 <= in_complex_data_V_TDATA_int_regslice(32 - 1 downto 0);
end behav;
