# This script segment is generated automatically by AutoPilot

set id 1
set name axi_fir_fmul_32ns_32ns_32_4_max_dsp_1
set corename simcore_fmul
set op fmul
set stage_num 4
set max_latency -1
set registered_input 1
set impl_style max_dsp
set Futype4reduceCEFanout 1
set clk_width 1
set clk_signed 0
set reset_width 1
set reset_signed 0
set in0_width 32
set in0_signed 0
set in1_width 32
set in1_signed 0
set ce_width 1
set ce_signed 0
set out_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_fmul] == "ap_gen_simcore_fmul"} {
eval "ap_gen_simcore_fmul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_fmul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op fmul
set corename FMul_maxdsp
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::fpv6_gen] == "::AESL_LIB_XILINX_FPV6::fpv6_gen"} {
eval "::AESL_LIB_XILINX_FPV6::fpv6_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::fpv6_gen, check your platform lib"
}
}


set id 2
set name axi_fir_facc_32ns_32ns_1ns_32_6_no_dsp_1
set corename simcore_facc
set op facc
set stage_num 6
set max_latency -1
set registered_input 1
set impl_style no_dsp
set clk_width 1
set clk_signed 0
set reset_width 1
set reset_signed 0
set ce_width 1
set ce_signed 0
set in_data_width 32
set in_data_signed 0
set in_last_width 1
set in_last_signed 0
set in_valid_width 1
set in_valid_signed 0
set out_data_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_facc] == "ap_gen_simcore_facc"} {
eval "ap_gen_simcore_facc { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    in_data_width ${in_data_width} \
    in_data_signed ${in_data_signed} \
    in_last_width ${in_last_width} \
    in_last_signed ${in_last_signed} \
    in_valid_width ${in_valid_width} \
    in_valid_signed ${in_valid_signed} \
    out_data_width ${out_data_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_facc, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op facc
set corename FAcc_nodsp
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::facc_gen] == "::AESL_LIB_XILINX_FPV6::facc_gen"} {
eval "::AESL_LIB_XILINX_FPV6::facc_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    in_data_width ${in_data_width} \
    in_data_signed ${in_data_signed} \
    in_last_width ${in_last_width} \
    in_last_signed ${in_last_signed} \
    in_valid_width ${in_valid_width} \
    in_valid_signed ${in_valid_signed} \
    out_data_width ${out_data_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::facc_gen, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 5
set hasByteEnable 0
set MemName axi_fir_shift_reg_a
set CoreName ap_simcore_mem
set PortList { 2 2 }
set DataWd 32
set AddrRange 409
set AddrWd 9
set impl_style auto
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 6
set hasByteEnable 0
set MemName axi_fir_taps
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 409
set AddrWd 9
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "00110100000010001000101011101101" "00110011110100010101100000100110" "00110011100100101000100101010010" "00110011000111011000111011010111" "10000000000000000000000000000000" "10110011010000000010001001011001" "10110011110101111110001100010000" "10110100001101110000111111100001" "10110100100010100110100100001011" "10110100110001000101111110110000" "10110101000001011001110110100110" "10110101001100000110101100010110" "10110101011000111000101000011010" "10110101100011111111100001001100" "10110101101100110100101110101011" "10110101110111000011110001010110" "10110110000001011010001110111101" "10110110001000000111010010101100" "10110110001111101100111000100001" "10110110011000001110101110110001" "10110110100000111000001101011100" "10110110100110001010101011001100" "10110110101100000000010101111111" "10110110110010011010101001111011" "10110110111001011010111000000111" "10110111000000100001000010010111" "10110111000100101000100010011111" "10110111001001000100001110100011" "10110111001101110100001111000100" "10110111010010111000100001111010" "10110111011000010000111001001100" "10110111011101111100111010001011" "10110111100001111101111110000111" "10110111100101000110100011111001" "10110111101000010111101010101001" "10110111101011110000100110001110" "10110111101111010000100001100100" "10110111110010110110011110011101" "10110111110110100001010101000110" "10110111111010001111110011111000" "10110111111110000000011111010001" "10111000000000111000111000110010" "10111000000010110000111101100011" "10111000000100100111100001000000" "10111000000110011011100001011000" "10111000001000001011111000000101" "10111000001001110111011001111111" "10111000001011011100110111101001" "10111000001100111010111101100111" "10111000001110010000010100111000" "10111000001111011011100011010011" "10111000010000011011001100000111" "10111000010001001101110000100000" "10111000010001110001110000010100" "10111000010010000101101010101101" "10111000010010000111111110111011" "10111000010001110111001101001111" "10111000010001010001110111101100" "10111000010000010110100011001000" "10111000001111000011111000001100" "10111000001101011000100100010011" "10111000001011010011011010110001" "10111000001000110011010101110101" "10111000000101110111010111110100" "10111000000010011110101100001111" "10110111111101010001010001110010" "10110111110100101001011110000001" "10110111101011000101011000100111" "10110111100000100100111000000110" "10110111001010010000100000001110" "10110110100011000001001101010111" "00110110000100001101010101110100" "00110111000101010111101000011101" "00110111100001101011101111011110" "00110111110001011110011101101111" "00111000000001000000001101001100" "00111000001001100110101101000001" "00111000010010100000010101001000" "00111000011011101010011000110001" "00111000100010100000111011110110" "00111000100111010001101111001111" "00111000101100000101110011100011" "00111000110000111011001100110001" "00111000110101101111110110010101" "00111000111010100001100011101101" "00111000111111001110000001000010" "00111001000001111001011001111101" "00111001000100000110101110000110" "00111001000110001101101010100110" "00111001001000001100111011010000" "00111001001010000011001010110000" "00111001001011101111000011001101" "00111001001101001111001110111100" "00111001001110100010011001010000" "00111001001111100111001111001100" "00111001010000011100100000011011" "00111001010001000001000000001001" "00111001010001010011100101111110" "00111001010001010011001110111011" "00111001010000111110111110011001" "00111001010000010101111111001100" "00111001001111010111100100100001" "00111001001110000011001011000001" "00111001001100011000011001110010" "00111001001010010111000011011010" "00111001000111111111000110111101" "00111001000101010000110001000000" "00111001000010001100011100011111" "00111000111101100101100111100000" "00111000110110001001100010100111" "00111000101110000111000001011100" "00111000100101100000111110100101" "00111000011000110101110011001101" "00111000000101110001110000001111" "00110111100011111110011011011010" "10110110000101110010110001100111" "10110111101110001010111111100110" "10111000001011111110100100001010" "10111000100000011001111100111000" "10111000101010101010111000000111" "10111000110100101001100010111011" "10111000111110001100110100011101" "10111001000011100101011110010110" "10111001000111101100110010110101" "10111001001011010110111010011110" "10111001001110011110000110101011" "10111001010000111100011000100010" "10111001010010101011100001111100" "10111001010011100101000110111111" "10111001010011100010011111011000" "10111001010010011100111000000010" "10111001010000001101010100110101" "10111001001100101100110010100010" "10111001000111110100001000101100" "10111001000001011100001011110110" "10111000110010111011011111010110" "10111000011111000110100101101000" "10110111100010000110010001010000" "00111000000100101111011010001001" "00111000110001010110010000010100" "00111001001010010011101110100111" "00111001011110001100000111100100" "00111001101010001101001111110111" "00111001110110100010011000000111" "00111010000010000100000110111101" "00111010001001100000101011000110" "00111010010001101000000100000001" "00111010011010011011010101101111" "00111010100001111101101110000010" "00111010100111000100100101000001" "00111010101100100010100100101011" "00111010110010010111111100110111" "00111010111000100100111000010001" "00111010111111001001011100000100" "00111011000011000010110011111001" "00111011000110101100101010100011" "00111011001010100010001011110010" "00111011001110100011001110010011" "00111011010010101111100101101001" "00111011010111000111000010001010" "00111011011011101001010000111011" "00111011100000001010111101111001" "00111011100010100110010100101100" "00111011100101000110011110100000" "00111011100111101011001011011100" "00111011101010010100001001111111" "00111011101101000001000111000110" "00111011101111110001101110001111" "00111011110010100101101001011011" "00111011110101011100100001001111" "00111011111000010101111100111111" "00111011111011010001100010101101" "00111011111110001110110111001110" "00111100000000100110101111001010" "00111100000010000110011101011001" "00111100000011100110010111010001" "00111100000101000110001101010110" "00111100000110100101101111110110" "00111100001000000100101110101110" "00111100001001100010111001101111" "00111100001011000000000000011110" "00111100001100011011110010011110" "00111100001101110101111111001110" "00111100001111001110010110010010" "00111100010000100100100111010110" "00111100010001111000100010010001" "00111100010011001001110111001011" "00111100010100011000010110100010" "00111100010101100011110001001100" "00111100010110101011111000011100" "00111100010111110000011110001001" "00111100011000110001010100101100" "00111100011001101110001111001011" "00111100011010100111000001010111" "00111100011011011011011111110010" "00111100011100001011011111110011" "00111100011100110110110111100110" "00111100011101011101011110010011" "00111100011101111111001011111111" "00111100011110011011111001101011" "00111100011110110011100001011101" "00111100011111000101111110011001" "00111100011111010011001100101011" "00111100011111011011001001100100" "00111100011111011101110011010111" "00111100011111011011001001100100" "00111100011111010011001100101011" "00111100011111000101111110011001" "00111100011110110011100001011101" "00111100011110011011111001101011" "00111100011101111111001011111111" "00111100011101011101011110010011" "00111100011100110110110111100110" "00111100011100001011011111110011" "00111100011011011011011111110010" "00111100011010100111000001010111" "00111100011001101110001111001011" "00111100011000110001010100101100" "00111100010111110000011110001001" "00111100010110101011111000011100" "00111100010101100011110001001100" "00111100010100011000010110100010" "00111100010011001001110111001011" "00111100010001111000100010010001" "00111100010000100100100111010110" "00111100001111001110010110010010" "00111100001101110101111111001110" "00111100001100011011110010011110" "00111100001011000000000000011110" "00111100001001100010111001101111" "00111100001000000100101110101110" "00111100000110100101101111110110" "00111100000101000110001101010110" "00111100000011100110010111010001" "00111100000010000110011101011001" "00111100000000100110101111001010" "00111011111110001110110111001110" "00111011111011010001100010101101" "00111011111000010101111100111111" "00111011110101011100100001001111" "00111011110010100101101001011011" "00111011101111110001101110001111" "00111011101101000001000111000110" "00111011101010010100001001111111" "00111011100111101011001011011100" "00111011100101000110011110100000" "00111011100010100110010100101100" "00111011100000001010111101111001" "00111011011011101001010000111011" "00111011010111000111000010001010" "00111011010010101111100101101001" "00111011001110100011001110010011" "00111011001010100010001011110010" "00111011000110101100101010100011" "00111011000011000010110011111001" "00111010111111001001011100000100" "00111010111000100100111000010001" "00111010110010010111111100110111" "00111010101100100010100100101011" "00111010100111000100100101000001" "00111010100001111101101110000010" "00111010011010011011010101101111" "00111010010001101000000100000001" "00111010001001100000101011000110" "00111010000010000100000110111101" "00111001110110100010011000000111" "00111001101010001101001111110111" "00111001011110001100000111100100" "00111001001010010011101110100111" "00111000110001010110010000010100" "00111000000100101111011010001001" "10110111100010000110010001010000" "10111000011111000110100101101000" "10111000110010111011011111010110" "10111001000001011100001011110110" "10111001000111110100001000101100" "10111001001100101100110010100010" "10111001010000001101010100110101" "10111001010010011100111000000010" "10111001010011100010011111011000" "10111001010011100101000110111111" "10111001010010101011100001111100" "10111001010000111100011000100010" "10111001001110011110000110101011" "10111001001011010110111010011110" "10111001000111101100110010110101" "10111001000011100101011110010110" "10111000111110001100110100011101" "10111000110100101001100010111011" "10111000101010101010111000000111" "10111000100000011001111100111000" "10111000001011111110100100001010" "10110111101110001010111111100110" "10110110000101110010110001100111" "00110111100011111110011011011010" "00111000000101110001110000001111" "00111000011000110101110011001101" "00111000100101100000111110100101" "00111000101110000111000001011100" "00111000110110001001100010100111" "00111000111101100101100111100000" "00111001000010001100011100011111" "00111001000101010000110001000000" "00111001000111111111000110111101" "00111001001010010111000011011010" "00111001001100011000011001110010" "00111001001110000011001011000001" "00111001001111010111100100100001" "00111001010000010101111111001100" "00111001010000111110111110011001" "00111001010001010011001110111011" "00111001010001010011100101111110" "00111001010001000001000000001001" "00111001010000011100100000011011" "00111001001111100111001111001100" "00111001001110100010011001010000" "00111001001101001111001110111100" "00111001001011101111000011001101" "00111001001010000011001010110000" "00111001001000001100111011010000" "00111001000110001101101010100110" "00111001000100000110101110000110" "00111001000001111001011001111101" "00111000111111001110000001000010" "00111000111010100001100011101101" "00111000110101101111110110010101" "00111000110000111011001100110001" "00111000101100000101110011100011" "00111000100111010001101111001111" "00111000100010100000111011110110" "00111000011011101010011000110001" "00111000010010100000010101001000" "00111000001001100110101101000001" "00111000000001000000001101001100" "00110111110001011110011101101111" "00110111100001101011101111011110" "00110111000101010111101000011101" "00110110000100001101010101110100" "10110110100011000001001101010111" "10110111001010010000100000001110" "10110111100000100100111000000110" "10110111101011000101011000100111" "10110111110100101001011110000001" "10110111111101010001010001110010" "10111000000010011110101100001111" "10111000000101110111010111110100" "10111000001000110011010101110101" "10111000001011010011011010110001" "10111000001101011000100100010011" "10111000001111000011111000001100" "10111000010000010110100011001000" "10111000010001010001110111101100" "10111000010001110111001101001111" "10111000010010000111111110111011" "10111000010010000101101010101101" "10111000010001110001110000010100" "10111000010001001101110000100000" "10111000010000011011001100000111" "10111000001111011011100011010011" "10111000001110010000010100111000" "10111000001100111010111101100111" "10111000001011011100110111101001" "10111000001001110111011001111111" "10111000001000001011111000000101" "10111000000110011011100001011000" "10111000000100100111100001000000" "10111000000010110000111101100011" "10111000000000111000111000110010" "10110111111110000000011111010001" "10110111111010001111110011111000" "10110111110110100001010101000110" "10110111110010110110011110011101" "10110111101111010000100001100100" "10110111101011110000100110001110" "10110111101000010111101010101001" "10110111100101000110100011111001" "10110111100001111101111110000111" "10110111011101111100111010001011" "10110111011000010000111001001100" "10110111010010111000100001111010" "10110111001101110100001111000100" "10110111001001000100001110100011" "10110111000100101000100010011111" "10110111000000100001000010010111" "10110110111001011010111000000111" "10110110110010011010101001111011" "10110110101100000000010101111111" "10110110100110001010101011001100" "10110110100000111000001101011100" "10110110011000001110101110110001" "10110110001111101100111000100001" "10110110001000000111010010101100" "10110110000001011010001110111101" "10110101110111000011110001010110" "10110101101100110100101110101011" "10110101100011111111100001001100" "10110101011000111000101000011010" "10110101001100000110101100010110" "10110101000001011001110110100110" "10110100110001000101111110110000" "10110100100010100110100100001011" "10110100001101110000111111100001" "10110011110101111110001100010000" "10110011010000000010001001011001" "10000000000000000000000000000000" "00110011000111011000111011010111" "00110011100100101000100101010010" "00110011110100010101100000100110" "00110100000010001000101011101101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

set axilite_register_dict [dict create]
# Native AXIS:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::native_axis_add] == "::AESL_LIB_XILADAPTER::native_axis_add"} {
eval "::AESL_LIB_XILADAPTER::native_axis_add { \
    id 7 \
    name in_data_V \
    reset_level 0 \
    sync_rst true \
    corename {} \
    metadata {  } \
    op interface \
    ports { in_data_V_TDATA { I 32 vector } in_data_V_TVALID { I 1 bit } in_data_V_TREADY { O 1 bit } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'in_data_V'"
}
}


# Native AXIS:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::native_axis_add] == "::AESL_LIB_XILADAPTER::native_axis_add"} {
eval "::AESL_LIB_XILADAPTER::native_axis_add { \
    id 8 \
    name out_fir_data_V \
    reset_level 0 \
    sync_rst true \
    corename {} \
    metadata {  } \
    op interface \
    ports { out_fir_data_V_TDATA { O 32 vector } out_fir_data_V_TVALID { O 1 bit } out_fir_data_V_TREADY { I 1 bit } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'out_fir_data_V'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 0 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst_n
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 0 \
    sync_rst true \
    corename apif_ap_rst_n \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


# RegSlice definition:
set ID 9
set RegSliceName axi_fir_regslice_both
set RegSliceInstName axi_fir_regslice_both_U
set CoreName ap_simcore_axi_fir_regslice_both
if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler $RegSliceName
}


if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_regSlice] == "::AESL_LIB_VIRTEX::xil_gen_regSlice"} {
eval "::AESL_LIB_VIRTEX::xil_gen_regSlice { \
    name ${RegSliceName} \
    prefix axi_fir_ \
    sliceTypeList 0\
}"
} else {
puts "@W \[IMPL-107\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_regSlice, check your platform lib"
}
}


# RegSlice definition:
set ID 10
set RegSliceName axi_fir_regslice_both
set RegSliceInstName axi_fir_regslice_both_U
set CoreName ap_simcore_axi_fir_regslice_both
if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler $RegSliceName
}


if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_regSlice] == "::AESL_LIB_VIRTEX::xil_gen_regSlice"} {
eval "::AESL_LIB_VIRTEX::xil_gen_regSlice { \
    name ${RegSliceName} \
    prefix axi_fir_ \
    sliceTypeList 0\
}"
} else {
puts "@W \[IMPL-107\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_regSlice, check your platform lib"
}
}


