-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_V_TVALID : IN STD_LOGIC;
    in_data_V_TREADY : OUT STD_LOGIC;
    out_fir_data_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_fir_data_V_TVALID : OUT STD_LOGIC;
    out_fir_data_V_TREADY : IN STD_LOGIC );
end;


architecture behav of axi_fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_fir_axi_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.536000,HLS_SYN_LAT=1023336,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=836,HLS_SYN_LUT=1439,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_198 : STD_LOGIC_VECTOR (8 downto 0) := "110011000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_199 : STD_LOGIC_VECTOR (8 downto 0) := "110011001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_4CC : STD_LOGIC_VECTOR (10 downto 0) := "10011001100";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_a_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal shift_reg_a_ce0 : STD_LOGIC;
    signal shift_reg_a_we0 : STD_LOGIC;
    signal shift_reg_a_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_a_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shift_reg_a_ce1 : STD_LOGIC;
    signal shift_reg_a_we1 : STD_LOGIC;
    signal shift_reg_a_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal taps_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal taps_ce0 : STD_LOGIC;
    signal taps_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln14_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_fir_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_1_reg_170 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_182 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln9_fu_209_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_1_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_306 : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out_fir_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal in_data_V_read_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln25_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln25_reg_324 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln30_fu_264_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln30_reg_334 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln30_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_340_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_a_load_1_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal taps_load_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_364_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_364_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_364_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_364_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal i_reg_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_159 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_i_1_phi_fu_174_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_186_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_cast_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast1_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_in_data_V_U_apdone_blk : STD_LOGIC;
    signal in_data_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_TVALID_int_regslice : STD_LOGIC;
    signal in_data_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_data_V_U_ack_in : STD_LOGIC;
    signal out_fir_data_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_fir_data_V_TVALID_int_regslice : STD_LOGIC;
    signal out_fir_data_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_fir_data_V_U_vld_out : STD_LOGIC;
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi_fir_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi_fir_facc_32ns_32ns_1ns_32_6_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi_fir_shift_reg_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi_fir_taps IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component axi_fir_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    shift_reg_a_U : component axi_fir_shift_reg_a
    generic map (
        DataWidth => 32,
        AddressRange => 409,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_a_address0,
        ce0 => shift_reg_a_ce0,
        we0 => shift_reg_a_we0,
        d0 => shift_reg_a_d0,
        q0 => shift_reg_a_q0,
        address1 => shift_reg_a_address1,
        ce1 => shift_reg_a_ce1,
        we1 => shift_reg_a_we1,
        d1 => shift_reg_a_d1,
        q1 => shift_reg_a_q1);

    taps_U : component axi_fir_taps
    generic map (
        DataWidth => 32,
        AddressRange => 409,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => taps_address0,
        ce0 => taps_ce0,
        q0 => taps_q0);

    fmul_32ns_32ns_32_4_max_dsp_1_U1 : component axi_fir_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => shift_reg_a_load_1_reg_354,
        din1 => taps_load_reg_359,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    facc_32ns_32ns_1ns_32_6_no_dsp_1_U2 : component axi_fir_facc_32ns_32ns_1ns_32_6_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        ce => ap_const_logic_1,
        in_data => mul_reg_369,
        in_last => icmp_ln32_reg_364_pp2_iter5_reg,
        in_valid => grp_fu_287_in_valid,
        out_data => grp_fu_287_p3);

    regslice_both_in_data_V_U : component axi_fir_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_V_TDATA,
        vld_in => in_data_V_TVALID,
        ack_in => regslice_both_in_data_V_U_ack_in,
        data_out => in_data_V_TDATA_int_regslice,
        vld_out => in_data_V_TVALID_int_regslice,
        ack_out => in_data_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_U_apdone_blk);

    regslice_both_out_fir_data_V_U : component axi_fir_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_fir_data_V_TDATA_int_regslice,
        vld_in => out_fir_data_V_TVALID_int_regslice,
        ack_in => out_fir_data_V_TREADY_int_regslice,
        data_out => out_fir_data_V_TDATA,
        vld_out => regslice_both_out_fir_data_V_U_vld_out,
        ack_out => out_fir_data_V_TREADY,
        apdone_blk => regslice_both_out_fir_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_170 <= ap_const_lv9_198;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_reg_320 = ap_const_lv1_0))) then 
                i_1_reg_170 <= add_ln25_reg_324;
            end if; 
        end if;
    end process;

    i_2_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_2_reg_182 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln30_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_182 <= add_ln30_reg_334;
            end if; 
        end if;
    end process;

    i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_148 <= ap_const_lv9_0;
            elsif (((icmp_ln9_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_148 <= add_ln9_fu_209_p2;
            end if; 
        end if;
    end process;

    j_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_159 <= ap_const_lv11_0;
            elsif (((out_fir_data_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                j_reg_159 <= j_1_reg_306;
            end if; 
        end if;
    end process;

    result_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                result_reg_193 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (icmp_ln30_reg_340_pp2_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                result_reg_193 <= grp_fu_287_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_fu_238_p2 = ap_const_lv1_0))) then
                add_ln25_reg_324 <= add_ln25_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln30_reg_334 <= add_ln30_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln25_reg_320 <= icmp_ln25_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln30_reg_340 <= icmp_ln30_fu_270_p2;
                icmp_ln30_reg_340_pp2_iter1_reg <= icmp_ln30_reg_340;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln30_reg_340_pp2_iter10_reg <= icmp_ln30_reg_340_pp2_iter9_reg;
                icmp_ln30_reg_340_pp2_iter2_reg <= icmp_ln30_reg_340_pp2_iter1_reg;
                icmp_ln30_reg_340_pp2_iter3_reg <= icmp_ln30_reg_340_pp2_iter2_reg;
                icmp_ln30_reg_340_pp2_iter4_reg <= icmp_ln30_reg_340_pp2_iter3_reg;
                icmp_ln30_reg_340_pp2_iter5_reg <= icmp_ln30_reg_340_pp2_iter4_reg;
                icmp_ln30_reg_340_pp2_iter6_reg <= icmp_ln30_reg_340_pp2_iter5_reg;
                icmp_ln30_reg_340_pp2_iter7_reg <= icmp_ln30_reg_340_pp2_iter6_reg;
                icmp_ln30_reg_340_pp2_iter8_reg <= icmp_ln30_reg_340_pp2_iter7_reg;
                icmp_ln30_reg_340_pp2_iter9_reg <= icmp_ln30_reg_340_pp2_iter8_reg;
                icmp_ln32_reg_364_pp2_iter2_reg <= icmp_ln32_reg_364;
                icmp_ln32_reg_364_pp2_iter3_reg <= icmp_ln32_reg_364_pp2_iter2_reg;
                icmp_ln32_reg_364_pp2_iter4_reg <= icmp_ln32_reg_364_pp2_iter3_reg;
                icmp_ln32_reg_364_pp2_iter5_reg <= icmp_ln32_reg_364_pp2_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln30_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln32_reg_364 <= icmp_ln32_fu_282_p2;
                taps_load_reg_359 <= taps_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                in_data_V_read_reg_315 <= in_data_V_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                j_1_reg_306 <= j_1_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_340_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                mul_reg_369 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln30_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                shift_reg_a_load_1_reg_354 <= shift_reg_a_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln14_fu_232_p2, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state2, regslice_both_out_fir_data_V_U_apdone_blk, icmp_ln25_fu_238_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, icmp_ln30_fu_270_p2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter11, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter10, icmp_ln9_fu_215_p2, in_data_V_TVALID_int_regslice, out_fir_data_V_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln25_fu_238_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln25_fu_238_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln30_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln30_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                if (((out_fir_data_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((out_fir_data_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_244_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_174_p4) + unsigned(ap_const_lv9_1FF));
    add_ln30_fu_264_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_186_p4) + unsigned(ap_const_lv9_1));
    add_ln9_fu_209_p2 <= std_logic_vector(unsigned(i_reg_148) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(7);
    ap_CS_fsm_state21 <= ap_CS_fsm(8);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_assign_proc : process(icmp_ln14_fu_232_p2, regslice_both_out_fir_data_V_U_apdone_blk, in_data_V_TVALID_int_regslice)
    begin
                ap_block_state4 <= ((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln25_fu_238_p2)
    begin
        if ((icmp_ln25_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln30_fu_270_p2)
    begin
        if ((icmp_ln30_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_232_p2, regslice_both_out_fir_data_V_U_apdone_blk, in_data_V_TVALID_int_regslice)
    begin
        if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_174_p4_assign_proc : process(i_1_reg_170, icmp_ln25_reg_320, ap_CS_fsm_pp1_stage0, add_ln25_reg_324, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln25_reg_320 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_174_p4 <= add_ln25_reg_324;
        else 
            ap_phi_mux_i_1_phi_fu_174_p4 <= i_1_reg_170;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_186_p4_assign_proc : process(i_2_reg_182, add_ln30_reg_334, ap_CS_fsm_pp2_stage0, icmp_ln30_reg_340, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln30_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_186_p4 <= add_ln30_reg_334;
        else 
            ap_phi_mux_i_2_phi_fu_186_p4 <= i_2_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_232_p2, regslice_both_out_fir_data_V_U_apdone_blk, in_data_V_TVALID_int_regslice)
    begin
        if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_287_in_valid_assign_proc : process(icmp_ln30_reg_340_pp2_iter5_reg, ap_enable_reg_pp2_iter6, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (icmp_ln30_reg_340_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_287_in_valid <= ap_const_logic_1;
        else 
            grp_fu_287_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_170),64));
    i_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_148),64));
    icmp_ln14_fu_232_p2 <= "1" when (j_reg_159 = ap_const_lv11_4CC) else "0";
    icmp_ln25_fu_238_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_174_p4 = ap_const_lv9_0) else "0";
    icmp_ln30_fu_270_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_186_p4 = ap_const_lv9_199) else "0";
    icmp_ln32_fu_282_p2 <= "1" when (add_ln30_reg_334 = ap_const_lv9_199) else "0";
    icmp_ln9_fu_215_p2 <= "1" when (i_reg_148 = ap_const_lv9_199) else "0";

    in_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_232_p2, in_data_V_TVALID_int_regslice)
    begin
        if (((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_data_V_TDATA_blk_n <= in_data_V_TVALID_int_regslice;
        else 
            in_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_data_V_TREADY <= regslice_both_in_data_V_U_ack_in;

    in_data_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_232_p2, regslice_both_out_fir_data_V_U_apdone_blk, in_data_V_TVALID_int_regslice)
    begin
        if ((not(((regslice_both_out_fir_data_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (in_data_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln14_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_data_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_data_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_226_p2 <= std_logic_vector(unsigned(j_reg_159) + unsigned(ap_const_lv11_1));

    out_fir_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, out_fir_data_V_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            out_fir_data_V_TDATA_blk_n <= out_fir_data_V_TREADY_int_regslice;
        else 
            out_fir_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_fir_data_V_TDATA_int_regslice <= result_reg_193;
    out_fir_data_V_TVALID <= regslice_both_out_fir_data_V_U_vld_out;

    out_fir_data_V_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state20, out_fir_data_V_TREADY_int_regslice)
    begin
        if (((out_fir_data_V_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            out_fir_data_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_fir_data_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, i_cast_fu_221_p1, i_1_cast1_fu_255_p1, zext_ln30_fu_276_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            shift_reg_a_address0 <= zext_ln30_fu_276_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            shift_reg_a_address0 <= i_1_cast1_fu_255_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_a_address0 <= i_cast_fu_221_p1(9 - 1 downto 0);
        else 
            shift_reg_a_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    shift_reg_a_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, ap_block_pp1_stage0, zext_ln26_fu_250_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            shift_reg_a_address1 <= ap_const_lv9_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            shift_reg_a_address1 <= zext_ln26_fu_250_p1(9 - 1 downto 0);
        else 
            shift_reg_a_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    shift_reg_a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            shift_reg_a_ce0 <= ap_const_logic_1;
        else 
            shift_reg_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_a_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            shift_reg_a_ce1 <= ap_const_logic_1;
        else 
            shift_reg_a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_a_d0_assign_proc : process(shift_reg_a_q1, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            shift_reg_a_d0 <= shift_reg_a_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_a_d0 <= ap_const_lv32_0;
        else 
            shift_reg_a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    shift_reg_a_d1 <= in_data_V_read_reg_315;

    shift_reg_a_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_reg_320, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, icmp_ln9_fu_215_p2)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_reg_320 = ap_const_lv1_0)) or ((icmp_ln9_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            shift_reg_a_we0 <= ap_const_logic_1;
        else 
            shift_reg_a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_a_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            shift_reg_a_we1 <= ap_const_logic_1;
        else 
            shift_reg_a_we1 <= ap_const_logic_0;
        end if; 
    end process;

    taps_address0 <= zext_ln30_fu_276_p1(9 - 1 downto 0);

    taps_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            taps_ce0 <= ap_const_logic_1;
        else 
            taps_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln26_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_244_p2),64));
    zext_ln30_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_186_p4),64));
end behav;
