// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_fir_axi_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.536000,HLS_SYN_LAT=1023336,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=836,HLS_SYN_LUT=1439,HLS_VERSION=2020_2}" *)

module axi_fir (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_V_TDATA,
        in_data_V_TVALID,
        in_data_V_TREADY,
        out_fir_data_V_TDATA,
        out_fir_data_V_TVALID,
        out_fir_data_V_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_pp1_stage0 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_pp2_stage0 = 9'd64;
parameter    ap_ST_fsm_state20 = 9'd128;
parameter    ap_ST_fsm_state21 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_data_V_TDATA;
input   in_data_V_TVALID;
output   in_data_V_TREADY;
output  [31:0] out_fir_data_V_TDATA;
output   out_fir_data_V_TVALID;
input   out_fir_data_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] shift_reg_a_address0;
reg    shift_reg_a_ce0;
reg    shift_reg_a_we0;
reg   [31:0] shift_reg_a_d0;
wire   [31:0] shift_reg_a_q0;
reg   [8:0] shift_reg_a_address1;
reg    shift_reg_a_ce1;
reg    shift_reg_a_we1;
wire   [31:0] shift_reg_a_d1;
wire   [31:0] shift_reg_a_q1;
wire   [8:0] taps_address0;
reg    taps_ce0;
wire   [31:0] taps_q0;
reg    in_data_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_232_p2;
reg    out_fir_data_V_TDATA_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [8:0] i_1_reg_170;
reg   [8:0] i_2_reg_182;
reg   [31:0] result_reg_193;
wire   [8:0] add_ln9_fu_209_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] j_1_fu_226_p2;
reg   [10:0] j_1_reg_306;
wire    regslice_both_out_fir_data_V_U_apdone_blk;
reg    ap_block_state4;
reg   [31:0] in_data_V_read_reg_315;
wire   [0:0] icmp_ln25_fu_238_p2;
reg   [0:0] icmp_ln25_reg_320;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] add_ln25_fu_244_p2;
reg   [8:0] add_ln25_reg_324;
reg    ap_enable_reg_pp1_iter0;
wire   [8:0] add_ln30_fu_264_p2;
reg   [8:0] add_ln30_reg_334;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_state10_pp2_stage0_iter2;
wire    ap_block_state11_pp2_stage0_iter3;
wire    ap_block_state12_pp2_stage0_iter4;
wire    ap_block_state13_pp2_stage0_iter5;
wire    ap_block_state14_pp2_stage0_iter6;
wire    ap_block_state15_pp2_stage0_iter7;
wire    ap_block_state16_pp2_stage0_iter8;
wire    ap_block_state17_pp2_stage0_iter9;
wire    ap_block_state18_pp2_stage0_iter10;
wire    ap_block_state19_pp2_stage0_iter11;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln30_fu_270_p2;
reg   [0:0] icmp_ln30_reg_340;
reg   [0:0] icmp_ln30_reg_340_pp2_iter1_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter2_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter3_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter4_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter5_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter6_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter7_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter8_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter9_reg;
reg   [0:0] icmp_ln30_reg_340_pp2_iter10_reg;
reg   [31:0] shift_reg_a_load_1_reg_354;
reg    ap_enable_reg_pp2_iter1;
reg   [31:0] taps_load_reg_359;
wire   [0:0] icmp_ln32_fu_282_p2;
reg   [0:0] icmp_ln32_reg_364;
reg   [0:0] icmp_ln32_reg_364_pp2_iter2_reg;
reg   [0:0] icmp_ln32_reg_364_pp2_iter3_reg;
reg   [0:0] icmp_ln32_reg_364_pp2_iter4_reg;
reg   [0:0] icmp_ln32_reg_364_pp2_iter5_reg;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] mul_reg_369;
wire   [31:0] grp_fu_287_p3;
reg    ap_enable_reg_pp2_iter11;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg   [8:0] i_reg_148;
wire   [0:0] icmp_ln9_fu_215_p2;
reg   [10:0] j_reg_159;
wire    ap_CS_fsm_state3;
reg   [8:0] ap_phi_mux_i_1_phi_fu_174_p4;
wire    ap_block_pp1_stage0;
reg   [8:0] ap_phi_mux_i_2_phi_fu_186_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] i_cast_fu_221_p1;
wire   [63:0] zext_ln26_fu_250_p1;
wire   [63:0] i_1_cast1_fu_255_p1;
wire   [63:0] zext_ln30_fu_276_p1;
reg    grp_fu_287_in_valid;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [31:0] in_data_V_TDATA_int_regslice;
wire    in_data_V_TVALID_int_regslice;
reg    in_data_V_TREADY_int_regslice;
wire    regslice_both_in_data_V_U_ack_in;
wire   [31:0] out_fir_data_V_TDATA_int_regslice;
reg    out_fir_data_V_TVALID_int_regslice;
wire    out_fir_data_V_TREADY_int_regslice;
wire    regslice_both_out_fir_data_V_U_vld_out;
wire   [31:0] grp_fu_287_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
end

axi_fir_shift_reg_a #(
    .DataWidth( 32 ),
    .AddressRange( 409 ),
    .AddressWidth( 9 ))
shift_reg_a_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_a_address0),
    .ce0(shift_reg_a_ce0),
    .we0(shift_reg_a_we0),
    .d0(shift_reg_a_d0),
    .q0(shift_reg_a_q0),
    .address1(shift_reg_a_address1),
    .ce1(shift_reg_a_ce1),
    .we1(shift_reg_a_we1),
    .d1(shift_reg_a_d1),
    .q1(shift_reg_a_q1)
);

axi_fir_taps #(
    .DataWidth( 32 ),
    .AddressRange( 409 ),
    .AddressWidth( 9 ))
taps_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(taps_address0),
    .ce0(taps_ce0),
    .q0(taps_q0)
);

axi_fir_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(shift_reg_a_load_1_reg_354),
    .din1(taps_load_reg_359),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

axi_fir_facc_32ns_32ns_1ns_32_6_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .ce(1'b1),
    .in_data(mul_reg_369),
    .in_last(icmp_ln32_reg_364_pp2_iter5_reg),
    .in_valid(grp_fu_287_in_valid),
    .out_data(grp_fu_287_p3)
);

axi_fir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_V_TDATA),
    .vld_in(in_data_V_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in_data_V_TDATA_int_regslice),
    .vld_out(in_data_V_TVALID_int_regslice),
    .ack_out(in_data_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

axi_fir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_fir_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_fir_data_V_TDATA_int_regslice),
    .vld_in(out_fir_data_V_TVALID_int_regslice),
    .ack_in(out_fir_data_V_TREADY_int_regslice),
    .data_out(out_fir_data_V_TDATA),
    .vld_out(regslice_both_out_fir_data_V_U_vld_out),
    .ack_out(out_fir_data_V_TREADY),
    .apdone_blk(regslice_both_out_fir_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state8)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_170 <= 9'd408;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_320 == 1'd0))) begin
        i_1_reg_170 <= add_ln25_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_182 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln30_reg_340 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_182 <= add_ln30_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_148 <= 9'd0;
    end else if (((icmp_ln9_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_148 <= add_ln9_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_159 <= 11'd0;
    end else if (((out_fir_data_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        j_reg_159 <= j_1_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        result_reg_193 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter11 == 1'b1) & (icmp_ln30_reg_340_pp2_iter10_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        result_reg_193 <= grp_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_fu_238_p2 == 1'd0))) begin
        add_ln25_reg_324 <= add_ln25_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln30_reg_334 <= add_ln30_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln25_reg_320 <= icmp_ln25_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln30_reg_340 <= icmp_ln30_fu_270_p2;
        icmp_ln30_reg_340_pp2_iter1_reg <= icmp_ln30_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln30_reg_340_pp2_iter10_reg <= icmp_ln30_reg_340_pp2_iter9_reg;
        icmp_ln30_reg_340_pp2_iter2_reg <= icmp_ln30_reg_340_pp2_iter1_reg;
        icmp_ln30_reg_340_pp2_iter3_reg <= icmp_ln30_reg_340_pp2_iter2_reg;
        icmp_ln30_reg_340_pp2_iter4_reg <= icmp_ln30_reg_340_pp2_iter3_reg;
        icmp_ln30_reg_340_pp2_iter5_reg <= icmp_ln30_reg_340_pp2_iter4_reg;
        icmp_ln30_reg_340_pp2_iter6_reg <= icmp_ln30_reg_340_pp2_iter5_reg;
        icmp_ln30_reg_340_pp2_iter7_reg <= icmp_ln30_reg_340_pp2_iter6_reg;
        icmp_ln30_reg_340_pp2_iter8_reg <= icmp_ln30_reg_340_pp2_iter7_reg;
        icmp_ln30_reg_340_pp2_iter9_reg <= icmp_ln30_reg_340_pp2_iter8_reg;
        icmp_ln32_reg_364_pp2_iter2_reg <= icmp_ln32_reg_364;
        icmp_ln32_reg_364_pp2_iter3_reg <= icmp_ln32_reg_364_pp2_iter2_reg;
        icmp_ln32_reg_364_pp2_iter4_reg <= icmp_ln32_reg_364_pp2_iter3_reg;
        icmp_ln32_reg_364_pp2_iter5_reg <= icmp_ln32_reg_364_pp2_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln30_reg_340 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln32_reg_364 <= icmp_ln32_fu_282_p2;
        taps_load_reg_359 <= taps_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_data_V_read_reg_315 <= in_data_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_306 <= j_1_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_340_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mul_reg_369 <= grp_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln30_reg_340 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        shift_reg_a_load_1_reg_354 <= shift_reg_a_q0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_238_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_270_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln25_reg_320 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_174_p4 = add_ln25_reg_324;
    end else begin
        ap_phi_mux_i_1_phi_fu_174_p4 = i_1_reg_170;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln30_reg_340 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_2_phi_fu_186_p4 = add_ln30_reg_334;
    end else begin
        ap_phi_mux_i_2_phi_fu_186_p4 = i_2_reg_182;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter6 == 1'b1) & (icmp_ln30_reg_340_pp2_iter5_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_287_in_valid = 1'b1;
    end else begin
        grp_fu_287_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_data_V_TDATA_blk_n = in_data_V_TVALID_int_regslice;
    end else begin
        in_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_data_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_data_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        out_fir_data_V_TDATA_blk_n = out_fir_data_V_TREADY_int_regslice;
    end else begin
        out_fir_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_fir_data_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        out_fir_data_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_fir_data_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        shift_reg_a_address0 = zext_ln30_fu_276_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        shift_reg_a_address0 = i_1_cast1_fu_255_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_a_address0 = i_cast_fu_221_p1;
    end else begin
        shift_reg_a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_a_address1 = 9'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        shift_reg_a_address1 = zext_ln26_fu_250_p1;
    end else begin
        shift_reg_a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        shift_reg_a_ce0 = 1'b1;
    end else begin
        shift_reg_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        shift_reg_a_ce1 = 1'b1;
    end else begin
        shift_reg_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        shift_reg_a_d0 = shift_reg_a_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_a_d0 = 32'd0;
    end else begin
        shift_reg_a_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_320 == 1'd0)) | ((icmp_ln9_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_a_we0 = 1'b1;
    end else begin
        shift_reg_a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_a_we1 = 1'b1;
    end else begin
        shift_reg_a_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        taps_ce0 = 1'b1;
    end else begin
        taps_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0))) & (icmp_ln14_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln25_fu_238_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln25_fu_238_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln30_fu_270_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln30_fu_270_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((out_fir_data_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((out_fir_data_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_244_p2 = ($signed(ap_phi_mux_i_1_phi_fu_174_p4) + $signed(9'd511));

assign add_ln30_fu_264_p2 = (ap_phi_mux_i_2_phi_fu_186_p4 + 9'd1);

assign add_ln9_fu_209_p2 = (i_reg_148 + 9'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4 = ((regslice_both_out_fir_data_V_U_apdone_blk == 1'b1) | ((icmp_ln14_fu_232_p2 == 1'd0) & (in_data_V_TVALID_int_regslice == 1'b0)));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_cast1_fu_255_p1 = i_1_reg_170;

assign i_cast_fu_221_p1 = i_reg_148;

assign icmp_ln14_fu_232_p2 = ((j_reg_159 == 11'd1228) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_238_p2 = ((ap_phi_mux_i_1_phi_fu_174_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_270_p2 = ((ap_phi_mux_i_2_phi_fu_186_p4 == 9'd409) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_282_p2 = ((add_ln30_reg_334 == 9'd409) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_215_p2 = ((i_reg_148 == 9'd409) ? 1'b1 : 1'b0);

assign in_data_V_TREADY = regslice_both_in_data_V_U_ack_in;

assign j_1_fu_226_p2 = (j_reg_159 + 11'd1);

assign out_fir_data_V_TDATA_int_regslice = result_reg_193;

assign out_fir_data_V_TVALID = regslice_both_out_fir_data_V_U_vld_out;

assign shift_reg_a_d1 = in_data_V_read_reg_315;

assign taps_address0 = zext_ln30_fu_276_p1;

assign zext_ln26_fu_250_p1 = add_ln25_fu_244_p2;

assign zext_ln30_fu_276_p1 = ap_phi_mux_i_2_phi_fu_186_p4;

endmodule //axi_fir
