-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_amplitude_sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of axi_amplitude_sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal second_order_float_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_24_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1090_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_244_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1095_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_254_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_reg_1103 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_reg_1103_pp0_iter1_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1109_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_293_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln628_reg_1121 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_1126 : STD_LOGIC_VECTOR (79 downto 0);
    signal icmp_ln824_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln824_reg_1136_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal ret_5_reg_1143 : STD_LOGIC_VECTOR (79 downto 0);
    signal Mx_bits_V_reg_1148 : STD_LOGIC_VECTOR (57 downto 0);
    signal k_V_reg_1155 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_V_3_fu_382_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_V_3_reg_1160 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_fu_432_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_reg_1165 : STD_LOGIC_VECTOR (5 downto 0);
    signal sin_basis_fu_436_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_reg_1171_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_1_reg_1178_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_reg_1184_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_V_reg_1189 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter9_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter10_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter11_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter12_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter13_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1189_pp0_iter14_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_V_3_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_3_reg_1195_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_635_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1205 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln300_2_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_2_reg_1210_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_fu_673_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1216 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1216_pp0_iter10_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1216_pp0_iter11_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1216_pp0_iter12_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_5_reg_1221 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_5_reg_1221_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1070_fu_697_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_reg_1252 : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_reg_1252_pp0_iter13_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal t1_reg_1252_pp0_iter14_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_sin_cos_K1_V_load_reg_1257 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_1_reg_1267 : STD_LOGIC_VECTOR (21 downto 0);
    signal rhs_1_reg_1267_pp0_iter14_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal Mx_V_1_fu_763_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_1_reg_1272 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_1_fu_794_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_1_reg_1277 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1292 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_7_reg_1298 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_9_reg_1303 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_2_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_2_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln255_fu_966_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln255_reg_1330 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln488_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_1_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln116_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_fu_278_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln735_fu_297_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_3_fu_300_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_25_fu_316_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_364_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln520_fu_369_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_2_fu_388_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_26_fu_398_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_406_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_27_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln832_fu_376_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_29_fu_458_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_465_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_503_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_1_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ex_V_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1253_fu_593_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_2_fu_596_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln646_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1334_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_629_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_i_i_i_i180_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1287_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1312_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_trunc_fu_687_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_28_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1076_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal B_squared_fu_714_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_747_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_2_fu_747_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln657_fu_778_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln657_1_fu_781_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_2_fu_769_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_fu_784_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1146_fu_790_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_4_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_23_fu_856_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_77_1_fu_874_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_V_4_fu_892_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_i_i25_i_0_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln319_fu_917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln169_fu_898_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln329_fu_931_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln329_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln321_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1312_fu_970_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal conv_i_i25_i_1_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_3_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_982_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_992_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln321_1_fu_1001_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal out_exp_V_fu_1015_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal significand_fu_1008_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln311_fu_1021_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln300_1_fu_1035_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_1_fu_1028_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln300_3_fu_1049_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_exp_V_fu_1042_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_V_fu_1056_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_30_fu_1063_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1076_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1076_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1083_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_327_ce : STD_LOGIC;
    signal grp_fu_806_ce : STD_LOGIC;
    signal grp_fu_1076_ce : STD_LOGIC;
    signal grp_fu_1083_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to18 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1083_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_327_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_806_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_2_fu_747_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component axi_amplitude_mul_80s_24ns_80_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component axi_amplitude_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component axi_amplitude_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component axi_amplitude_mul_23s_22ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component axi_amplitude_mul_30s_29ns_58_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component axi_amplitude_mul_mul_15ns_15ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component axi_amplitude_mul_mul_15ns_15s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component axi_amplitude_sin_or_cos_float_s_ref_4oPi_table_100_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component axi_amplitude_sin_or_cos_float_s_ref_4oPi_table_100_V
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_sin_cos_K0_V_U : component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K0_V
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K0_V_address0,
        ce0 => second_order_float_sin_cos_K0_V_ce0,
        q0 => second_order_float_sin_cos_K0_V_q0);

    second_order_float_sin_cos_K1_V_U : component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K1_V
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K1_V_address0,
        ce0 => second_order_float_sin_cos_K1_V_ce0,
        q0 => second_order_float_sin_cos_K1_V_q0);

    second_order_float_sin_cos_K2_V_U : component axi_amplitude_sin_or_cos_float_s_second_order_float_sin_cos_K2_V
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K2_V_address0,
        ce0 => second_order_float_sin_cos_K2_V_ce0,
        q0 => second_order_float_sin_cos_K2_V_q0);

    mul_80s_24ns_80_5_1_U1 : component axi_amplitude_mul_80s_24ns_80_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 80)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Med_V_reg_1126,
        din1 => grp_fu_327_p1,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);

    mux_83_1_1_1_U2 : component axi_amplitude_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => select_ln832_fu_376_p3,
        dout => sin_basis_fu_436_p10);

    mux_164_1_1_1_U3 : component axi_amplitude_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_29_fu_458_p3,
        dout => tmp_fu_465_p18);

    mux_164_1_1_1_U4 : component axi_amplitude_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_29_fu_458_p3,
        dout => tmp_2_fu_503_p18);

    mul_23s_22ns_45_1_1_U5 : component axi_amplitude_mul_23s_22ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 22,
        dout_WIDTH => 45)
    port map (
        din0 => second_order_float_sin_cos_K1_V_load_reg_1257,
        din1 => r_V_2_fu_747_p1,
        dout => r_V_2_fu_747_p2);

    mul_30s_29ns_58_2_1_U6 : component axi_amplitude_mul_30s_29ns_58_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_1_reg_1277,
        din1 => grp_fu_806_p1,
        ce => grp_fu_806_ce,
        dout => grp_fu_806_p2);

    mul_mul_15ns_15ns_30_4_1_U7 : component axi_amplitude_mul_mul_15ns_15ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1076_p0,
        din1 => grp_fu_1076_p1,
        ce => grp_fu_1076_ce,
        dout => grp_fu_1076_p2);

    mul_mul_15ns_15s_30_4_1_U8 : component axi_amplitude_mul_mul_15ns_15s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1083_p0,
        din1 => second_order_float_sin_cos_K2_V_q0,
        ce => grp_fu_1083_ce,
        dout => grp_fu_1083_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                B_reg_1216 <= B_fu_673_p1;
                B_reg_1216_pp0_iter10_reg <= B_reg_1216;
                B_reg_1216_pp0_iter11_reg <= B_reg_1216_pp0_iter10_reg;
                B_reg_1216_pp0_iter12_reg <= B_reg_1216_pp0_iter11_reg;
                Ex_V_3_reg_1195 <= Ex_V_3_fu_611_p2;
                Ex_V_3_reg_1195_pp0_iter10_reg <= Ex_V_3_reg_1195_pp0_iter9_reg;
                Ex_V_3_reg_1195_pp0_iter11_reg <= Ex_V_3_reg_1195_pp0_iter10_reg;
                Ex_V_3_reg_1195_pp0_iter12_reg <= Ex_V_3_reg_1195_pp0_iter11_reg;
                Ex_V_3_reg_1195_pp0_iter13_reg <= Ex_V_3_reg_1195_pp0_iter12_reg;
                Ex_V_3_reg_1195_pp0_iter14_reg <= Ex_V_3_reg_1195_pp0_iter13_reg;
                Ex_V_3_reg_1195_pp0_iter15_reg <= Ex_V_3_reg_1195_pp0_iter14_reg;
                Ex_V_3_reg_1195_pp0_iter16_reg <= Ex_V_3_reg_1195_pp0_iter15_reg;
                Ex_V_3_reg_1195_pp0_iter17_reg <= Ex_V_3_reg_1195_pp0_iter16_reg;
                Ex_V_3_reg_1195_pp0_iter9_reg <= Ex_V_3_reg_1195;
                Mx_V_1_reg_1272 <= Mx_V_1_fu_763_p3;
                Mx_V_reg_1189 <= r_2_fu_596_p2(57 downto 29);
                Mx_V_reg_1189_pp0_iter10_reg <= Mx_V_reg_1189_pp0_iter9_reg;
                Mx_V_reg_1189_pp0_iter11_reg <= Mx_V_reg_1189_pp0_iter10_reg;
                Mx_V_reg_1189_pp0_iter12_reg <= Mx_V_reg_1189_pp0_iter11_reg;
                Mx_V_reg_1189_pp0_iter13_reg <= Mx_V_reg_1189_pp0_iter12_reg;
                Mx_V_reg_1189_pp0_iter14_reg <= Mx_V_reg_1189_pp0_iter13_reg;
                Mx_V_reg_1189_pp0_iter9_reg <= Mx_V_reg_1189;
                Mx_bits_V_3_reg_1160 <= Mx_bits_V_3_fu_382_p3;
                Mx_bits_V_reg_1148 <= grp_fu_327_p2(76 downto 19);
                Mx_zeros_reg_1165 <= Mx_zeros_fu_432_p1;
                closepath_reg_1109_pp0_iter2_reg <= closepath_reg_1109_pp0_iter1_reg;
                closepath_reg_1109_pp0_iter3_reg <= closepath_reg_1109_pp0_iter2_reg;
                closepath_reg_1109_pp0_iter4_reg <= closepath_reg_1109_pp0_iter3_reg;
                closepath_reg_1109_pp0_iter5_reg <= closepath_reg_1109_pp0_iter4_reg;
                closepath_reg_1109_pp0_iter6_reg <= closepath_reg_1109_pp0_iter5_reg;
                closepath_reg_1109_pp0_iter7_reg <= closepath_reg_1109_pp0_iter6_reg;
                icmp_ln300_1_reg_1178 <= icmp_ln300_1_fu_559_p2;
                icmp_ln300_1_reg_1178_pp0_iter10_reg <= icmp_ln300_1_reg_1178_pp0_iter9_reg;
                icmp_ln300_1_reg_1178_pp0_iter11_reg <= icmp_ln300_1_reg_1178_pp0_iter10_reg;
                icmp_ln300_1_reg_1178_pp0_iter12_reg <= icmp_ln300_1_reg_1178_pp0_iter11_reg;
                icmp_ln300_1_reg_1178_pp0_iter13_reg <= icmp_ln300_1_reg_1178_pp0_iter12_reg;
                icmp_ln300_1_reg_1178_pp0_iter14_reg <= icmp_ln300_1_reg_1178_pp0_iter13_reg;
                icmp_ln300_1_reg_1178_pp0_iter15_reg <= icmp_ln300_1_reg_1178_pp0_iter14_reg;
                icmp_ln300_1_reg_1178_pp0_iter16_reg <= icmp_ln300_1_reg_1178_pp0_iter15_reg;
                icmp_ln300_1_reg_1178_pp0_iter17_reg <= icmp_ln300_1_reg_1178_pp0_iter16_reg;
                icmp_ln300_1_reg_1178_pp0_iter18_reg <= icmp_ln300_1_reg_1178_pp0_iter17_reg;
                icmp_ln300_1_reg_1178_pp0_iter8_reg <= icmp_ln300_1_reg_1178;
                icmp_ln300_1_reg_1178_pp0_iter9_reg <= icmp_ln300_1_reg_1178_pp0_iter8_reg;
                icmp_ln300_2_reg_1210 <= icmp_ln300_2_fu_643_p2;
                icmp_ln300_2_reg_1210_pp0_iter10_reg <= icmp_ln300_2_reg_1210_pp0_iter9_reg;
                icmp_ln300_2_reg_1210_pp0_iter11_reg <= icmp_ln300_2_reg_1210_pp0_iter10_reg;
                icmp_ln300_2_reg_1210_pp0_iter12_reg <= icmp_ln300_2_reg_1210_pp0_iter11_reg;
                icmp_ln300_2_reg_1210_pp0_iter13_reg <= icmp_ln300_2_reg_1210_pp0_iter12_reg;
                icmp_ln300_2_reg_1210_pp0_iter14_reg <= icmp_ln300_2_reg_1210_pp0_iter13_reg;
                icmp_ln300_2_reg_1210_pp0_iter15_reg <= icmp_ln300_2_reg_1210_pp0_iter14_reg;
                icmp_ln300_2_reg_1210_pp0_iter16_reg <= icmp_ln300_2_reg_1210_pp0_iter15_reg;
                icmp_ln300_2_reg_1210_pp0_iter17_reg <= icmp_ln300_2_reg_1210_pp0_iter16_reg;
                icmp_ln300_2_reg_1210_pp0_iter18_reg <= icmp_ln300_2_reg_1210_pp0_iter17_reg;
                icmp_ln300_2_reg_1210_pp0_iter9_reg <= icmp_ln300_2_reg_1210;
                icmp_ln321_reg_1319 <= icmp_ln321_fu_911_p2;
                icmp_ln824_reg_1136 <= icmp_ln824_fu_332_p2;
                icmp_ln824_reg_1136_pp0_iter10_reg <= icmp_ln824_reg_1136_pp0_iter9_reg;
                icmp_ln824_reg_1136_pp0_iter11_reg <= icmp_ln824_reg_1136_pp0_iter10_reg;
                icmp_ln824_reg_1136_pp0_iter12_reg <= icmp_ln824_reg_1136_pp0_iter11_reg;
                icmp_ln824_reg_1136_pp0_iter13_reg <= icmp_ln824_reg_1136_pp0_iter12_reg;
                icmp_ln824_reg_1136_pp0_iter14_reg <= icmp_ln824_reg_1136_pp0_iter13_reg;
                icmp_ln824_reg_1136_pp0_iter15_reg <= icmp_ln824_reg_1136_pp0_iter14_reg;
                icmp_ln824_reg_1136_pp0_iter16_reg <= icmp_ln824_reg_1136_pp0_iter15_reg;
                icmp_ln824_reg_1136_pp0_iter17_reg <= icmp_ln824_reg_1136_pp0_iter16_reg;
                icmp_ln824_reg_1136_pp0_iter18_reg <= icmp_ln824_reg_1136_pp0_iter17_reg;
                icmp_ln824_reg_1136_pp0_iter3_reg <= icmp_ln824_reg_1136;
                icmp_ln824_reg_1136_pp0_iter4_reg <= icmp_ln824_reg_1136_pp0_iter3_reg;
                icmp_ln824_reg_1136_pp0_iter5_reg <= icmp_ln824_reg_1136_pp0_iter4_reg;
                icmp_ln824_reg_1136_pp0_iter6_reg <= icmp_ln824_reg_1136_pp0_iter5_reg;
                icmp_ln824_reg_1136_pp0_iter7_reg <= icmp_ln824_reg_1136_pp0_iter6_reg;
                icmp_ln824_reg_1136_pp0_iter8_reg <= icmp_ln824_reg_1136_pp0_iter7_reg;
                icmp_ln824_reg_1136_pp0_iter9_reg <= icmp_ln824_reg_1136_pp0_iter8_reg;
                isNeg_reg_1200 <= Ex_V_3_fu_611_p2(7 downto 7);
                or_ln335_reg_1324 <= or_ln335_fu_960_p2;
                p_Result_24_reg_1090_pp0_iter2_reg <= p_Result_24_reg_1090_pp0_iter1_reg;
                p_Result_24_reg_1090_pp0_iter3_reg <= p_Result_24_reg_1090_pp0_iter2_reg;
                p_Result_24_reg_1090_pp0_iter4_reg <= p_Result_24_reg_1090_pp0_iter3_reg;
                p_Result_24_reg_1090_pp0_iter5_reg <= p_Result_24_reg_1090_pp0_iter4_reg;
                p_Result_24_reg_1090_pp0_iter6_reg <= p_Result_24_reg_1090_pp0_iter5_reg;
                p_Result_5_reg_1221 <= select_ln1312_fu_666_p3(28 downto 22);
                p_Result_5_reg_1221_pp0_iter10_reg <= p_Result_5_reg_1221;
                p_Result_7_reg_1298 <= grp_fu_806_p2(57 downto 42);
                p_Result_9_reg_1303 <= grp_fu_806_p2(41 downto 29);
                result_V_reg_1292 <= grp_fu_806_p2(57 downto 29);
                results_sign_V_reg_1184 <= results_sign_V_fu_572_p2;
                results_sign_V_reg_1184_pp0_iter10_reg <= results_sign_V_reg_1184_pp0_iter9_reg;
                results_sign_V_reg_1184_pp0_iter11_reg <= results_sign_V_reg_1184_pp0_iter10_reg;
                results_sign_V_reg_1184_pp0_iter12_reg <= results_sign_V_reg_1184_pp0_iter11_reg;
                results_sign_V_reg_1184_pp0_iter13_reg <= results_sign_V_reg_1184_pp0_iter12_reg;
                results_sign_V_reg_1184_pp0_iter14_reg <= results_sign_V_reg_1184_pp0_iter13_reg;
                results_sign_V_reg_1184_pp0_iter15_reg <= results_sign_V_reg_1184_pp0_iter14_reg;
                results_sign_V_reg_1184_pp0_iter16_reg <= results_sign_V_reg_1184_pp0_iter15_reg;
                results_sign_V_reg_1184_pp0_iter17_reg <= results_sign_V_reg_1184_pp0_iter16_reg;
                results_sign_V_reg_1184_pp0_iter18_reg <= results_sign_V_reg_1184_pp0_iter17_reg;
                results_sign_V_reg_1184_pp0_iter8_reg <= results_sign_V_reg_1184;
                results_sign_V_reg_1184_pp0_iter9_reg <= results_sign_V_reg_1184_pp0_iter8_reg;
                ret_5_reg_1143 <= grp_fu_327_p2;
                ret_V_1_reg_1277 <= ret_V_1_fu_794_p2;
                rhs_1_reg_1267 <= r_V_2_fu_747_p2(44 downto 23);
                rhs_1_reg_1267_pp0_iter14_reg <= rhs_1_reg_1267;
                second_order_float_sin_cos_K1_V_load_reg_1257 <= second_order_float_sin_cos_K1_V_q0;
                shl_ln1253_2_reg_1313 <= shl_ln1253_2_fu_905_p2;
                sin_basis_reg_1171 <= sin_basis_fu_436_p10;
                sin_basis_reg_1171_pp0_iter10_reg <= sin_basis_reg_1171_pp0_iter9_reg;
                sin_basis_reg_1171_pp0_iter11_reg <= sin_basis_reg_1171_pp0_iter10_reg;
                sin_basis_reg_1171_pp0_iter12_reg <= sin_basis_reg_1171_pp0_iter11_reg;
                sin_basis_reg_1171_pp0_iter13_reg <= sin_basis_reg_1171_pp0_iter12_reg;
                sin_basis_reg_1171_pp0_iter14_reg <= sin_basis_reg_1171_pp0_iter13_reg;
                sin_basis_reg_1171_pp0_iter15_reg <= sin_basis_reg_1171_pp0_iter14_reg;
                sin_basis_reg_1171_pp0_iter16_reg <= sin_basis_reg_1171_pp0_iter15_reg;
                sin_basis_reg_1171_pp0_iter17_reg <= sin_basis_reg_1171_pp0_iter16_reg;
                sin_basis_reg_1171_pp0_iter8_reg <= sin_basis_reg_1171;
                sin_basis_reg_1171_pp0_iter9_reg <= sin_basis_reg_1171_pp0_iter8_reg;
                t1_reg_1252 <= second_order_float_sin_cos_K0_V_q0(29 downto 1);
                t1_reg_1252_pp0_iter13_reg <= t1_reg_1252;
                t1_reg_1252_pp0_iter14_reg <= t1_reg_1252_pp0_iter13_reg;
                tmp_14_reg_1095_pp0_iter2_reg <= tmp_14_reg_1095_pp0_iter1_reg;
                tmp_14_reg_1095_pp0_iter3_reg <= tmp_14_reg_1095_pp0_iter2_reg;
                tmp_14_reg_1095_pp0_iter4_reg <= tmp_14_reg_1095_pp0_iter3_reg;
                tmp_14_reg_1095_pp0_iter5_reg <= tmp_14_reg_1095_pp0_iter4_reg;
                tmp_14_reg_1095_pp0_iter6_reg <= tmp_14_reg_1095_pp0_iter5_reg;
                tmp_14_reg_1095_pp0_iter7_reg <= tmp_14_reg_1095_pp0_iter6_reg;
                tmp_1_reg_1308 <= tmp_1_fu_884_p3;
                trunc_ln255_reg_1330 <= trunc_ln255_fu_966_p1;
                ush_reg_1205 <= ush_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then
                Med_V_reg_1126 <= r_3_fu_300_p2(99 downto 20);
                closepath_reg_1109 <= closepath_fu_258_p2;
                closepath_reg_1109_pp0_iter1_reg <= closepath_reg_1109;
                p_Result_24_reg_1090 <= data_V_fu_232_p1(31 downto 31);
                p_Result_24_reg_1090_pp0_iter1_reg <= p_Result_24_reg_1090;
                tmp_14_reg_1095 <= data_V_fu_232_p1(30 downto 23);
                tmp_14_reg_1095_pp0_iter1_reg <= tmp_14_reg_1095;
                tmp_15_reg_1103 <= tmp_15_fu_254_p1;
                tmp_15_reg_1103_pp0_iter1_reg <= tmp_15_reg_1103;
                trunc_ln628_reg_1121 <= trunc_ln628_fu_293_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (closepath_reg_1109_pp0_iter5_reg = ap_const_lv1_0))) then
                k_V_reg_1155 <= grp_fu_327_p2(79 downto 77);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_fu_673_p1 <= select_ln1312_fu_666_p3(22 - 1 downto 0);
    B_squared_fu_714_p4 <= grp_fu_1076_p2(29 downto 15);
    B_trunc_fu_687_p4 <= select_ln1312_fu_666_p3(21 downto 7);
    Ex_V_3_fu_611_p2 <= std_logic_vector(unsigned(select_ln482_fu_583_p3) - unsigned(zext_ln646_fu_590_p1));
    Ex_V_4_fu_892_p3 <= 
        Ex_V_3_reg_1195_pp0_iter17_reg when (sin_basis_reg_1171_pp0_iter17_reg(0) = '1') else 
        ap_const_lv8_0;
    Ex_V_fu_578_p2 <= std_logic_vector(unsigned(tmp_14_reg_1095_pp0_iter7_reg) + unsigned(ap_const_lv8_83));
    Mx_V_1_fu_763_p3 <= 
        Mx_V_reg_1189_pp0_iter14_reg when (sin_basis_reg_1171_pp0_iter14_reg(0) = '1') else 
        ap_const_lv29_1FFFFFFF;
    Mx_bits_V_1_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_V_reg_1148));
    Mx_bits_V_3_fu_382_p3 <= 
        Mx_bits_V_reg_1148 when (closepath_reg_1109_pp0_iter6_reg(0) = '1') else 
        select_ln520_fu_369_p3;
    Mx_zeros_fu_432_p1 <= val_assign_fu_424_p3(6 - 1 downto 0);
    add_ln116_fu_264_p2 <= std_logic_vector(unsigned(tmp_14_fu_244_p4) + unsigned(ap_const_lv8_C2));
    add_ln319_fu_917_p2 <= std_logic_vector(unsigned(tmp_1_fu_884_p3) + unsigned(ap_const_lv32_10));
    add_ln329_fu_931_p2 <= std_logic_vector(signed(sext_ln169_fu_898_p1) + signed(ap_const_lv9_7F));
    addr_fu_270_p3 <= 
        ap_const_lv8_3F when (closepath_fu_258_p2(0) = '1') else 
        add_ln116_fu_264_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to18_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to18 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to18)
    begin
        if (((ap_idle_pp0_0to18 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_30_fu_1063_p4;
    closepath_fu_258_p2 <= "1" when (unsigned(tmp_14_fu_244_p4) < unsigned(ap_const_lv8_7E)) else "0";
    conv_i_i25_i_0_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_reg_1292),32));
    conv_i_i25_i_1_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1312_fu_970_p1),32));
    conv_i_i_i_i180_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1189),32));
    data_V_fu_232_p1 <= t_in;

    grp_fu_1076_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fu_1076_ce <= ap_const_logic_1;
        else 
            grp_fu_1076_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1076_p0 <= zext_ln1070_fu_697_p1(15 - 1 downto 0);
    grp_fu_1076_p1 <= zext_ln1070_fu_697_p1(15 - 1 downto 0);

    grp_fu_1083_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fu_1083_ce <= ap_const_logic_1;
        else 
            grp_fu_1083_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1083_p0 <= grp_fu_1083_p00(15 - 1 downto 0);
    grp_fu_1083_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_fu_714_p4),30));

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_327_p1 <= grp_fu_327_p10(24 - 1 downto 0);
    grp_fu_327_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_25_fu_316_p3),80));

    grp_fu_806_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fu_806_ce <= ap_const_logic_1;
        else 
            grp_fu_806_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_806_p1 <= grp_fu_806_p10(29 - 1 downto 0);
    grp_fu_806_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_1_reg_1272),58));
    icmp_ln1452_fu_955_p2 <= "1" when (result_V_reg_1292 = ap_const_lv29_0) else "0";
    icmp_ln300_1_fu_559_p2 <= "1" when (tmp_14_reg_1095_pp0_iter6_reg = ap_const_lv8_0) else "0";
    icmp_ln300_2_fu_643_p2 <= "1" when (tmp_14_reg_1095_pp0_iter7_reg = ap_const_lv8_FF) else "0";
    icmp_ln300_fu_554_p2 <= "0" when (tmp_14_reg_1095_pp0_iter6_reg = ap_const_lv8_FF) else "1";
    icmp_ln321_fu_911_p2 <= "1" when (tmp3_fu_866_p3 = ap_const_lv32_10) else "0";
    icmp_ln824_fu_332_p2 <= "1" when (tmp_15_reg_1103_pp0_iter1_reg = ap_const_lv23_0) else "0";
    isNeg_fu_621_p3 <= Ex_V_3_fu_611_p2(7 downto 7);
    lshr_ln1287_fu_654_p2 <= std_logic_vector(shift_right(unsigned(conv_i_i_i_i180_fu_651_p1),to_integer(unsigned('0' & sext_ln1311_fu_648_p1(31-1 downto 0)))));
    newexp_fu_941_p2 <= std_logic_vector(signed(sext_ln329_fu_937_p1) - signed(select_ln321_fu_923_p3));
    or_ln335_fu_960_p2 <= (tmp_11_fu_947_p3 or icmp_ln1452_fu_955_p2);
    out_exp_V_fu_1015_p3 <= 
        ap_const_lv8_0 when (or_ln335_reg_1324(0) = '1') else 
        trunc_ln255_reg_1330;
    p_Result_25_fu_316_p3 <= (ap_const_lv1_1 & tmp_15_reg_1103_pp0_iter1_reg);
    p_Result_26_fu_398_p3 <= (p_Result_2_fu_388_p4 & ap_const_lv1_1);
    p_Result_27_fu_416_p3 <= (ap_const_lv2_3 & p_Result_s_fu_406_p4);
    p_Result_28_fu_701_p3 <= (sin_basis_reg_1171_pp0_iter10_reg & p_Result_5_reg_1221_pp0_iter10_reg);
    p_Result_29_fu_458_p3 <= (p_Result_24_reg_1090_pp0_iter6_reg & select_ln832_fu_376_p3);
    p_Result_2_fu_388_p4 <= Mx_bits_V_3_fu_382_p3(57 downto 29);
    p_Result_30_fu_1063_p4 <= ((results_sign_V_reg_1184_pp0_iter18_reg & results_exp_V_fu_1042_p3) & results_sig_V_fu_1056_p3);
    p_Result_4_fu_842_p3 <= (p_Result_7_reg_1298 & ap_const_lv16_8000);
    p_Result_6_fu_849_p3 <= (p_Result_9_reg_1303 & ap_const_lv19_40000);
    
    p_Result_77_1_fu_874_p4_proc : process(p_Result_6_fu_849_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_77_1_fu_874_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_6_fu_849_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_77_1_fu_874_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_77_1_fu_874_p4_i) := p_Result_6_fu_849_p3(32-1-p_Result_77_1_fu_874_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_77_1_fu_874_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_s_23_fu_856_p4_proc : process(p_Result_4_fu_842_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_s_23_fu_856_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_4_fu_842_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_s_23_fu_856_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_s_23_fu_856_p4_i) := p_Result_4_fu_842_p3(32-1-p_Result_s_23_fu_856_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_23_fu_856_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_s_fu_406_p4_proc : process(p_Result_26_fu_398_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_s_fu_406_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_26_fu_398_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_s_fu_406_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_s_fu_406_p4_i) := p_Result_26_fu_398_p3(30-1-p_Result_s_fu_406_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_406_p4 <= resvalue(30-1 downto 0);
    end process;

    r_2_fu_596_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_reg_1160),to_integer(unsigned('0' & zext_ln1253_fu_593_p1(31-1 downto 0)))));
    r_3_fu_300_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln735_fu_297_p1(31-1 downto 0)))));
    r_V_2_fu_747_p1 <= r_V_2_fu_747_p10(22 - 1 downto 0);
    r_V_2_fu_747_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1216_pp0_iter12_reg),45));
    r_fu_278_p4 <= addr_fu_270_p3(7 downto 4);
    ref_4oPi_table_100_V_address0 <= zext_ln488_fu_288_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_fu_1042_p3 <= 
        select_ln311_fu_1021_p3 when (icmp_ln300_1_reg_1178_pp0_iter18_reg(0) = '1') else 
        select_ln300_1_fu_1035_p3;
    results_sig_V_fu_1056_p3 <= 
        select_ln311_1_fu_1028_p3 when (icmp_ln300_1_reg_1178_pp0_iter18_reg(0) = '1') else 
        select_ln300_3_fu_1049_p3;
    results_sign_V_1_fu_541_p3 <= 
        tmp_fu_465_p18 when (sin_basis_fu_436_p10(0) = '1') else 
        tmp_2_fu_503_p18;
    results_sign_V_fu_572_p2 <= (select_ln300_fu_564_p3 and results_sign_V_1_fu_541_p3);
    ret_V_1_fu_794_p2 <= std_logic_vector(unsigned(ret_V_fu_784_p2) + unsigned(sext_ln1146_fu_790_p1));
    ret_V_fu_784_p2 <= std_logic_vector(signed(sext_ln657_fu_778_p1) + signed(sext_ln657_1_fu_781_p1));
    rhs_2_fu_769_p4 <= grp_fu_1083_p2(29 downto 16);
    second_order_float_sin_cos_K0_V_address0 <= zext_ln488_1_fu_707_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K1_V_address0 <= zext_ln488_1_fu_707_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K2_V_address0 <= zext_ln488_1_fu_707_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1312_fu_666_p3 <= 
        lshr_ln1287_fu_654_p2 when (isNeg_reg_1200(0) = '1') else 
        shl_ln1253_fu_660_p2;
    select_ln300_1_fu_1035_p3 <= 
        ap_const_lv8_FF when (icmp_ln300_2_reg_1210_pp0_iter18_reg(0) = '1') else 
        out_exp_V_fu_1015_p3;
    select_ln300_3_fu_1049_p3 <= 
        ap_const_lv23_7FFFFF when (icmp_ln300_2_reg_1210_pp0_iter18_reg(0) = '1') else 
        significand_fu_1008_p3;
    select_ln300_fu_564_p3 <= 
        xor_ln311_fu_549_p2 when (icmp_ln300_1_fu_559_p2(0) = '1') else 
        icmp_ln300_fu_554_p2;
    select_ln311_1_fu_1028_p3 <= 
        ap_const_lv23_0 when (icmp_ln824_reg_1136_pp0_iter18_reg(0) = '1') else 
        significand_fu_1008_p3;
    select_ln311_fu_1021_p3 <= 
        ap_const_lv8_7F when (icmp_ln824_reg_1136_pp0_iter18_reg(0) = '1') else 
        out_exp_V_fu_1015_p3;
    select_ln321_1_fu_1001_p3 <= 
        tmp_6_fu_982_p4 when (icmp_ln321_reg_1319(0) = '1') else 
        tmp_7_fu_992_p4;
    select_ln321_fu_923_p3 <= 
        add_ln319_fu_917_p2 when (icmp_ln321_fu_911_p2(0) = '1') else 
        tmp3_fu_866_p3;
    select_ln482_fu_583_p3 <= 
        Ex_V_fu_578_p2 when (closepath_reg_1109_pp0_iter7_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln520_fu_369_p3 <= 
        Mx_bits_V_1_fu_364_p2 when (tmp_9_fu_357_p3(0) = '1') else 
        Mx_bits_V_reg_1148;
    select_ln832_fu_376_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1109_pp0_iter6_reg(0) = '1') else 
        k_V_reg_1155;
        sext_ln1146_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_fu_769_p4),30));

        sext_ln1311_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1205),32));

        sext_ln1334_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_fu_611_p2),9));

        sext_ln169_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_892_p3),9));

        sext_ln329_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln329_fu_931_p2),32));

        sext_ln657_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1267_pp0_iter14_reg),30));

        sext_ln657_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_reg_1252_pp0_iter14_reg),30));

    shl_ln1253_2_fu_905_p2 <= std_logic_vector(shift_left(unsigned(conv_i_i25_i_0_fu_902_p1),to_integer(unsigned('0' & tmp3_fu_866_p3(31-1 downto 0)))));
    shl_ln1253_3_fu_977_p2 <= std_logic_vector(shift_left(unsigned(conv_i_i25_i_1_fu_973_p1),to_integer(unsigned('0' & tmp_1_reg_1308(31-1 downto 0)))));
    shl_ln1253_fu_660_p2 <= std_logic_vector(shift_left(unsigned(conv_i_i_i_i180_fu_651_p1),to_integer(unsigned('0' & sext_ln1311_fu_648_p1(31-1 downto 0)))));
    significand_fu_1008_p3 <= 
        ap_const_lv23_0 when (or_ln335_reg_1324(0) = '1') else 
        select_ln321_1_fu_1001_p3;
    sub_ln1311_fu_629_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1334_fu_617_p1));
    
    tmp3_fu_866_p3_proc : process(p_Result_s_23_fu_856_p4)
    begin
        tmp3_fu_866_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_s_23_fu_856_p4(i) = '1' then
                tmp3_fu_866_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_11_fu_947_p3 <= newexp_fu_941_p2(31 downto 31);
    tmp_14_fu_244_p4 <= data_V_fu_232_p1(30 downto 23);
    tmp_15_fu_254_p1 <= data_V_fu_232_p1(23 - 1 downto 0);
    
    tmp_1_fu_884_p3_proc : process(p_Result_77_1_fu_874_p4)
    begin
        tmp_1_fu_884_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_77_1_fu_874_p4(i) = '1' then
                tmp_1_fu_884_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_6_fu_982_p4 <= shl_ln1253_3_fu_977_p2(27 downto 5);
    tmp_7_fu_992_p4 <= shl_ln1253_2_reg_1313(27 downto 5);
    tmp_9_fu_357_p3 <= ret_5_reg_1143(77 downto 77);
    trunc_ln1312_fu_970_p1 <= shl_ln1253_2_reg_1313(28 - 1 downto 0);
    trunc_ln255_fu_966_p1 <= newexp_fu_941_p2(8 - 1 downto 0);
    trunc_ln628_fu_293_p1 <= addr_fu_270_p3(4 - 1 downto 0);
    ush_fu_635_p3 <= 
        sub_ln1311_fu_629_p2 when (isNeg_fu_621_p3(0) = '1') else 
        sext_ln1334_fu_617_p1;
    
    val_assign_fu_424_p3_proc : process(p_Result_27_fu_416_p3)
    begin
        val_assign_fu_424_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_27_fu_416_p3(i) = '1' then
                val_assign_fu_424_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    xor_ln311_fu_549_p2 <= (icmp_ln824_reg_1136_pp0_iter6_reg xor ap_const_lv1_1);
    zext_ln1070_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_fu_687_p4),30));
    zext_ln1253_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1165),58));
    zext_ln488_1_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_28_fu_701_p3),64));
    zext_ln488_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_278_p4),64));
    zext_ln646_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1165),8));
    zext_ln735_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1121),100));
end behav;
