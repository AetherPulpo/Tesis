// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_bottle_axi_bottle,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.880250,HLS_SYN_LAT=1027,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=83,HLS_SYN_LUT=114,HLS_VERSION=2020_2}" *)

module axi_bottle (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_complex_data_V_TDATA,
        in_complex_data_V_TVALID,
        in_complex_data_V_TREADY,
        out_complex_data_1_V_TDATA,
        out_complex_data_1_V_TVALID,
        out_complex_data_1_V_TREADY,
        out_complex_data_2_V_TDATA,
        out_complex_data_2_V_TVALID,
        out_complex_data_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_complex_data_V_TDATA;
input   in_complex_data_V_TVALID;
output   in_complex_data_V_TREADY;
output  [63:0] out_complex_data_1_V_TDATA;
output   out_complex_data_1_V_TVALID;
input   out_complex_data_1_V_TREADY;
output  [63:0] out_complex_data_2_V_TDATA;
output   out_complex_data_2_V_TVALID;
input   out_complex_data_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_complex_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln11_fu_85_p2;
reg    out_complex_data_1_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln11_reg_96;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln11_reg_96_pp0_iter1_reg;
reg    out_complex_data_2_V_TDATA_blk_n;
reg   [10:0] i_reg_68;
wire   [10:0] i_1_fu_79_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] in_complex_data_V_read_reg_100;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state5;
wire    regslice_both_out_complex_data_1_V_U_apdone_blk;
wire    regslice_both_out_complex_data_2_V_U_apdone_blk;
reg    ap_block_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_complex_data_V_U_apdone_blk;
wire   [63:0] in_complex_data_V_TDATA_int_regslice;
wire    in_complex_data_V_TVALID_int_regslice;
reg    in_complex_data_V_TREADY_int_regslice;
wire    regslice_both_in_complex_data_V_U_ack_in;
reg    out_complex_data_1_V_TVALID_int_regslice;
wire    out_complex_data_1_V_TREADY_int_regslice;
wire    regslice_both_out_complex_data_1_V_U_vld_out;
reg    out_complex_data_2_V_TVALID_int_regslice;
wire    out_complex_data_2_V_TREADY_int_regslice;
wire    regslice_both_out_complex_data_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

axi_bottle_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_complex_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_complex_data_V_TDATA),
    .vld_in(in_complex_data_V_TVALID),
    .ack_in(regslice_both_in_complex_data_V_U_ack_in),
    .data_out(in_complex_data_V_TDATA_int_regslice),
    .vld_out(in_complex_data_V_TVALID_int_regslice),
    .ack_out(in_complex_data_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_complex_data_V_U_apdone_blk)
);

axi_bottle_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_complex_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_complex_data_V_read_reg_100),
    .vld_in(out_complex_data_1_V_TVALID_int_regslice),
    .ack_in(out_complex_data_1_V_TREADY_int_regslice),
    .data_out(out_complex_data_1_V_TDATA),
    .vld_out(regslice_both_out_complex_data_1_V_U_vld_out),
    .ack_out(out_complex_data_1_V_TREADY),
    .apdone_blk(regslice_both_out_complex_data_1_V_U_apdone_blk)
);

axi_bottle_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_complex_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_complex_data_V_read_reg_100),
    .vld_in(out_complex_data_2_V_TVALID_int_regslice),
    .ack_in(out_complex_data_2_V_TREADY_int_regslice),
    .data_out(out_complex_data_2_V_TDATA),
    .vld_out(regslice_both_out_complex_data_2_V_U_vld_out),
    .ack_out(out_complex_data_2_V_TREADY),
    .apdone_blk(regslice_both_out_complex_data_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_68 <= i_1_fu_79_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_68 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln11_reg_96 <= icmp_ln11_fu_85_p2;
        icmp_ln11_reg_96_pp0_iter1_reg <= icmp_ln11_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_complex_data_V_read_reg_100 <= in_complex_data_V_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_85_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_complex_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_out_complex_data_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_out_complex_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_out_complex_data_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_complex_data_V_TDATA_blk_n = in_complex_data_V_TVALID_int_regslice;
    end else begin
        in_complex_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_complex_data_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_complex_data_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln11_reg_96 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_complex_data_1_V_TDATA_blk_n = out_complex_data_1_V_TREADY_int_regslice;
    end else begin
        out_complex_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_96 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_complex_data_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_complex_data_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln11_reg_96 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_complex_data_2_V_TDATA_blk_n = out_complex_data_2_V_TREADY_int_regslice;
    end else begin
        out_complex_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_96 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_complex_data_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_complex_data_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln11_fu_85_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln11_fu_85_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((regslice_both_out_complex_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_out_complex_data_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((icmp_ln11_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_complex_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((icmp_ln11_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_complex_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)))) | ((icmp_ln11_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_complex_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln11_fu_85_p2 == 1'd0) & (in_complex_data_V_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = (((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96 == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = (((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_2_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln11_reg_96_pp0_iter1_reg == 1'd0) & (out_complex_data_1_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = ((regslice_both_out_complex_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_out_complex_data_1_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_79_p2 = (i_reg_68 + 11'd1);

assign icmp_ln11_fu_85_p2 = ((i_reg_68 == 11'd1024) ? 1'b1 : 1'b0);

assign in_complex_data_V_TREADY = regslice_both_in_complex_data_V_U_ack_in;

assign out_complex_data_1_V_TVALID = regslice_both_out_complex_data_1_V_U_vld_out;

assign out_complex_data_2_V_TVALID = regslice_both_out_complex_data_2_V_U_vld_out;

endmodule //axi_bottle
