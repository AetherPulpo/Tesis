// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_modulus_axi_modulus,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1051,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=757,HLS_SYN_LUT=1167,HLS_VERSION=2020_2}" *)

module axi_modulus (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_complex_data_V_TDATA,
        in_complex_data_V_TVALID,
        in_complex_data_V_TREADY,
        out_modulus_V_TDATA,
        out_modulus_V_TVALID,
        out_modulus_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state29 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_complex_data_V_TDATA;
input   in_complex_data_V_TVALID;
output   in_complex_data_V_TREADY;
output  [31:0] out_modulus_V_TDATA;
output   out_modulus_V_TVALID;
input   out_modulus_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_complex_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln13_fu_101_p2;
reg    out_modulus_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter25;
reg   [0:0] icmp_ln13_reg_141;
reg   [0:0] icmp_ln13_reg_141_pp0_iter24_reg;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] icmp_ln13_reg_141_pp0_iter25_reg;
reg   [10:0] i_reg_67;
wire   [10:0] i_1_fu_95_p2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
reg    ap_block_state27_pp0_stage0_iter25;
reg    ap_block_state27_io;
reg    ap_block_state28_pp0_stage0_iter26;
reg    ap_block_state28_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln13_reg_141_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter6_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter7_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter8_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter9_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter10_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter11_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter12_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter13_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter14_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter15_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter16_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter17_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter18_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter19_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter20_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter21_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter22_reg;
reg   [0:0] icmp_ln13_reg_141_pp0_iter23_reg;
wire   [31:0] trunc_ln145_fu_107_p1;
reg   [31:0] trunc_ln145_reg_145;
reg   [31:0] trunc_ln145_1_reg_150;
wire   [31:0] tmp_M_value_fu_121_p1;
wire   [31:0] tmp_M_value_1_fu_126_p1;
wire   [31:0] grp_fu_82_p2;
reg   [31:0] mul_reg_167;
wire   [31:0] grp_fu_86_p2;
reg   [31:0] mul4_reg_172;
wire   [31:0] grp_fu_78_p2;
reg   [31:0] x_assign_reg_177;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_90_p2;
reg    grp_fu_78_ce;
reg    grp_fu_82_ce;
reg    grp_fu_86_ce;
reg    grp_fu_90_ce;
wire    ap_CS_fsm_state29;
wire    regslice_both_out_modulus_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_complex_data_V_U_apdone_blk;
wire   [63:0] in_complex_data_V_TDATA_int_regslice;
wire    in_complex_data_V_TVALID_int_regslice;
reg    in_complex_data_V_TREADY_int_regslice;
wire    regslice_both_in_complex_data_V_U_ack_in;
wire   [31:0] out_modulus_V_TDATA_int_regslice;
reg    out_modulus_V_TVALID_int_regslice;
wire    out_modulus_V_TREADY_int_regslice;
wire    regslice_both_out_modulus_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
end

axi_modulus_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_reg_167),
    .din1(mul4_reg_172),
    .ce(grp_fu_78_ce),
    .dout(grp_fu_78_p2)
);

axi_modulus_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_M_value_fu_121_p1),
    .din1(tmp_M_value_fu_121_p1),
    .ce(grp_fu_82_ce),
    .dout(grp_fu_82_p2)
);

axi_modulus_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_M_value_1_fu_126_p1),
    .din1(tmp_M_value_1_fu_126_p1),
    .ce(grp_fu_86_ce),
    .dout(grp_fu_86_p2)
);

axi_modulus_fsqrt_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_16_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(x_assign_reg_177),
    .ce(grp_fu_90_ce),
    .dout(grp_fu_90_p2)
);

axi_modulus_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_complex_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_complex_data_V_TDATA),
    .vld_in(in_complex_data_V_TVALID),
    .ack_in(regslice_both_in_complex_data_V_U_ack_in),
    .data_out(in_complex_data_V_TDATA_int_regslice),
    .vld_out(in_complex_data_V_TVALID_int_regslice),
    .ack_out(in_complex_data_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_complex_data_V_U_apdone_blk)
);

axi_modulus_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_modulus_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_modulus_V_TDATA_int_regslice),
    .vld_in(out_modulus_V_TVALID_int_regslice),
    .ack_in(out_modulus_V_TREADY_int_regslice),
    .data_out(out_modulus_V_TDATA),
    .vld_out(regslice_both_out_modulus_V_U_vld_out),
    .ack_out(out_modulus_V_TREADY),
    .apdone_blk(regslice_both_out_modulus_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_101_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_67 <= i_1_fu_95_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_67 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_141 <= icmp_ln13_fu_101_p2;
        icmp_ln13_reg_141_pp0_iter1_reg <= icmp_ln13_reg_141;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln13_reg_141_pp0_iter10_reg <= icmp_ln13_reg_141_pp0_iter9_reg;
        icmp_ln13_reg_141_pp0_iter11_reg <= icmp_ln13_reg_141_pp0_iter10_reg;
        icmp_ln13_reg_141_pp0_iter12_reg <= icmp_ln13_reg_141_pp0_iter11_reg;
        icmp_ln13_reg_141_pp0_iter13_reg <= icmp_ln13_reg_141_pp0_iter12_reg;
        icmp_ln13_reg_141_pp0_iter14_reg <= icmp_ln13_reg_141_pp0_iter13_reg;
        icmp_ln13_reg_141_pp0_iter15_reg <= icmp_ln13_reg_141_pp0_iter14_reg;
        icmp_ln13_reg_141_pp0_iter16_reg <= icmp_ln13_reg_141_pp0_iter15_reg;
        icmp_ln13_reg_141_pp0_iter17_reg <= icmp_ln13_reg_141_pp0_iter16_reg;
        icmp_ln13_reg_141_pp0_iter18_reg <= icmp_ln13_reg_141_pp0_iter17_reg;
        icmp_ln13_reg_141_pp0_iter19_reg <= icmp_ln13_reg_141_pp0_iter18_reg;
        icmp_ln13_reg_141_pp0_iter20_reg <= icmp_ln13_reg_141_pp0_iter19_reg;
        icmp_ln13_reg_141_pp0_iter21_reg <= icmp_ln13_reg_141_pp0_iter20_reg;
        icmp_ln13_reg_141_pp0_iter22_reg <= icmp_ln13_reg_141_pp0_iter21_reg;
        icmp_ln13_reg_141_pp0_iter23_reg <= icmp_ln13_reg_141_pp0_iter22_reg;
        icmp_ln13_reg_141_pp0_iter24_reg <= icmp_ln13_reg_141_pp0_iter23_reg;
        icmp_ln13_reg_141_pp0_iter25_reg <= icmp_ln13_reg_141_pp0_iter24_reg;
        icmp_ln13_reg_141_pp0_iter2_reg <= icmp_ln13_reg_141_pp0_iter1_reg;
        icmp_ln13_reg_141_pp0_iter3_reg <= icmp_ln13_reg_141_pp0_iter2_reg;
        icmp_ln13_reg_141_pp0_iter4_reg <= icmp_ln13_reg_141_pp0_iter3_reg;
        icmp_ln13_reg_141_pp0_iter5_reg <= icmp_ln13_reg_141_pp0_iter4_reg;
        icmp_ln13_reg_141_pp0_iter6_reg <= icmp_ln13_reg_141_pp0_iter5_reg;
        icmp_ln13_reg_141_pp0_iter7_reg <= icmp_ln13_reg_141_pp0_iter6_reg;
        icmp_ln13_reg_141_pp0_iter8_reg <= icmp_ln13_reg_141_pp0_iter7_reg;
        icmp_ln13_reg_141_pp0_iter9_reg <= icmp_ln13_reg_141_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_141_pp0_iter3_reg == 1'd0))) begin
        mul4_reg_172 <= grp_fu_86_p2;
        mul_reg_167 <= grp_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_101_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_1_reg_150 <= {{in_complex_data_V_TDATA_int_regslice[63:32]}};
        trunc_ln145_reg_145 <= trunc_ln145_fu_107_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_141_pp0_iter8_reg == 1'd0))) begin
        x_assign_reg_177 <= grp_fu_78_p2;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_101_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_modulus_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_modulus_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_78_ce = 1'b1;
    end else begin
        grp_fu_78_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_82_ce = 1'b1;
    end else begin
        grp_fu_82_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_86_ce = 1'b1;
    end else begin
        grp_fu_86_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_90_ce = 1'b1;
    end else begin
        grp_fu_90_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_101_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_complex_data_V_TDATA_blk_n = in_complex_data_V_TVALID_int_regslice;
    end else begin
        in_complex_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_101_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_complex_data_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_complex_data_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_modulus_V_TDATA_blk_n = out_modulus_V_TREADY_int_regslice;
    end else begin
        out_modulus_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_modulus_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_modulus_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln13_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter26 == 1'b1) & (ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter26 == 1'b1) & (ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln13_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((regslice_both_out_modulus_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (out_modulus_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (ap_enable_reg_pp0_iter25 == 1'b1) & (out_modulus_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln13_fu_101_p2 == 1'd0) & (in_complex_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter26 == 1'b1) & ((1'b1 == ap_block_state28_io) | ((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter25 == 1'b1) & ((1'b1 == ap_block_state27_io) | ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0)))) | ((icmp_ln13_fu_101_p2 == 1'd0) & (in_complex_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter26 == 1'b1) & ((1'b1 == ap_block_state28_io) | ((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter25 == 1'b1) & ((1'b1 == ap_block_state27_io) | ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0)))) | ((icmp_ln13_fu_101_p2 == 1'd0) & (in_complex_data_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state27_pp0_stage0_iter25 = ((icmp_ln13_reg_141_pp0_iter24_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state28_io = ((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state28_pp0_stage0_iter26 = ((icmp_ln13_reg_141_pp0_iter25_reg == 1'd0) & (out_modulus_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln13_fu_101_p2 == 1'd0) & (in_complex_data_V_TVALID_int_regslice == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_95_p2 = (i_reg_67 + 11'd1);

assign icmp_ln13_fu_101_p2 = ((i_reg_67 == 11'd1024) ? 1'b1 : 1'b0);

assign in_complex_data_V_TREADY = regslice_both_in_complex_data_V_U_ack_in;

assign out_modulus_V_TDATA_int_regslice = grp_fu_90_p2;

assign out_modulus_V_TVALID = regslice_both_out_modulus_V_U_vld_out;

assign tmp_M_value_1_fu_126_p1 = trunc_ln145_1_reg_150;

assign tmp_M_value_fu_121_p1 = trunc_ln145_reg_145;

assign trunc_ln145_fu_107_p1 = in_complex_data_V_TDATA_int_regslice[31:0];

endmodule //axi_modulus
