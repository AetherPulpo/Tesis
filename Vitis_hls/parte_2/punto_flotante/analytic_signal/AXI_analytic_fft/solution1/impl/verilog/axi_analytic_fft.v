// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_analytic_fft_axi_analytic_fft,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.400000,HLS_SYN_LAT=1029,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=637,HLS_SYN_LUT=1026,HLS_VERSION=2020_2}" *)

module axi_analytic_fft (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_V_TDATA,
        in_data_V_TVALID,
        in_data_V_TREADY,
        out_data_V_TDATA,
        out_data_V_TVALID,
        out_data_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_data_V_TDATA;
input   in_data_V_TVALID;
output   in_data_V_TREADY;
output  [63:0] out_data_V_TDATA;
output   out_data_V_TVALID;
input   out_data_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    out_data_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] inc10_reg_67;
wire   [9:0] add_ln35_fu_88_p2;
reg   [9:0] add_ln35_reg_191;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_M_value_fu_98_p1;
reg   [31:0] tmp_M_value_reg_196;
reg   [31:0] tmp_M_value_reg_196_pp0_iter1_reg;
reg   [31:0] tmp_M_value_reg_196_pp0_iter2_reg;
wire   [31:0] tmp_M_value_1_fu_113_p1;
reg   [31:0] tmp_M_value_1_reg_202;
reg   [31:0] tmp_M_value_1_reg_202_pp0_iter1_reg;
reg   [31:0] tmp_M_value_1_reg_202_pp0_iter2_reg;
wire   [0:0] or_ln22_fu_130_p2;
reg   [0:0] or_ln22_reg_208;
reg   [0:0] or_ln22_reg_208_pp0_iter1_reg;
reg   [0:0] or_ln22_reg_208_pp0_iter2_reg;
wire   [0:0] icmp_ln22_2_fu_136_p2;
reg   [0:0] icmp_ln22_2_reg_214;
reg   [0:0] icmp_ln22_2_reg_214_pp0_iter1_reg;
reg   [0:0] icmp_ln22_2_reg_214_pp0_iter2_reg;
wire   [0:0] icmp_ln35_fu_142_p2;
reg   [0:0] icmp_ln35_reg_220;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] ap_phi_mux_inc10_phi_fu_71_p4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_78_p0;
wire   [31:0] grp_fu_83_p0;
wire   [31:0] trunc_ln145_fu_94_p1;
wire   [31:0] trunc_ln145_1_fu_103_p4;
wire   [0:0] icmp_ln22_fu_118_p2;
wire   [0:0] icmp_ln22_1_fu_124_p2;
wire   [31:0] grp_fu_83_p2;
wire   [31:0] grp_fu_78_p2;
wire   [31:0] select_ln22_1_fu_154_p3;
wire   [31:0] bitcast_ln174_1_fu_160_p1;
wire   [31:0] select_ln22_fu_148_p3;
wire   [31:0] bitcast_ln174_fu_171_p1;
wire   [31:0] select_ln174_1_fu_175_p3;
wire   [31:0] select_ln174_fu_164_p3;
reg    grp_fu_78_ce;
reg    grp_fu_83_ce;
wire    ap_CS_fsm_state7;
wire    regslice_both_out_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [63:0] in_data_V_TDATA_int_regslice;
wire    in_data_V_TVALID_int_regslice;
reg    in_data_V_TREADY_int_regslice;
wire    regslice_both_in_data_V_U_ack_in;
wire   [63:0] out_data_V_TDATA_int_regslice;
reg    out_data_V_TVALID_int_regslice;
wire    out_data_V_TREADY_int_regslice;
wire    regslice_both_out_data_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

axi_analytic_fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_78_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_78_ce),
    .dout(grp_fu_78_p2)
);

axi_analytic_fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_83_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_83_ce),
    .dout(grp_fu_83_p2)
);

axi_analytic_fft_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_V_TDATA),
    .vld_in(in_data_V_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in_data_V_TDATA_int_regslice),
    .vld_out(in_data_V_TVALID_int_regslice),
    .ack_out(in_data_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

axi_analytic_fft_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_data_V_TDATA_int_regslice),
    .vld_in(out_data_V_TVALID_int_regslice),
    .ack_in(out_data_V_TREADY_int_regslice),
    .data_out(out_data_V_TDATA),
    .vld_out(regslice_both_out_data_V_U_vld_out),
    .ack_out(out_data_V_TREADY),
    .apdone_blk(regslice_both_out_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inc10_reg_67 <= 10'd0;
    end else if (((icmp_ln35_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        inc10_reg_67 <= add_ln35_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_reg_191 <= add_ln35_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_2_reg_214 <= icmp_ln22_2_fu_136_p2;
        icmp_ln22_2_reg_214_pp0_iter1_reg <= icmp_ln22_2_reg_214;
        icmp_ln35_reg_220 <= icmp_ln35_fu_142_p2;
        or_ln22_reg_208 <= or_ln22_fu_130_p2;
        or_ln22_reg_208_pp0_iter1_reg <= or_ln22_reg_208;
        tmp_M_value_1_reg_202 <= tmp_M_value_1_fu_113_p1;
        tmp_M_value_1_reg_202_pp0_iter1_reg <= tmp_M_value_1_reg_202;
        tmp_M_value_reg_196 <= tmp_M_value_fu_98_p1;
        tmp_M_value_reg_196_pp0_iter1_reg <= tmp_M_value_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln22_2_reg_214_pp0_iter2_reg <= icmp_ln22_2_reg_214_pp0_iter1_reg;
        or_ln22_reg_208_pp0_iter2_reg <= or_ln22_reg_208_pp0_iter1_reg;
        tmp_M_value_1_reg_202_pp0_iter2_reg <= tmp_M_value_1_reg_202_pp0_iter1_reg;
        tmp_M_value_reg_196_pp0_iter2_reg <= tmp_M_value_reg_196_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_inc10_phi_fu_71_p4 = add_ln35_reg_191;
    end else begin
        ap_phi_mux_inc10_phi_fu_71_p4 = inc10_reg_67;
    end
end

always @ (*) begin
    if (((regslice_both_out_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_78_ce = 1'b1;
    end else begin
        grp_fu_78_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_83_ce = 1'b1;
    end else begin
        grp_fu_83_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_V_TDATA_blk_n = in_data_V_TVALID_int_regslice;
    end else begin
        in_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_V_TREADY_int_regslice = 1'b1;
    end else begin
        in_data_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_data_V_TDATA_blk_n = out_data_V_TREADY_int_regslice;
    end else begin
        out_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_data_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_data_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_out_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_88_p2 = (ap_phi_mux_inc10_phi_fu_71_p4 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_data_V_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (in_data_V_TVALID_int_regslice == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (out_data_V_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = (out_data_V_TREADY_int_regslice == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln174_1_fu_160_p1 = select_ln22_1_fu_154_p3;

assign bitcast_ln174_fu_171_p1 = select_ln22_fu_148_p3;

assign grp_fu_78_p0 = trunc_ln145_fu_94_p1;

assign grp_fu_83_p0 = trunc_ln145_1_fu_103_p4;

assign icmp_ln22_1_fu_124_p2 = ((ap_phi_mux_inc10_phi_fu_71_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_136_p2 = ((ap_phi_mux_inc10_phi_fu_71_p4 > 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_118_p2 = ((ap_phi_mux_inc10_phi_fu_71_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_142_p2 = ((ap_phi_mux_inc10_phi_fu_71_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign in_data_V_TREADY = regslice_both_in_data_V_U_ack_in;

assign or_ln22_fu_130_p2 = (icmp_ln22_fu_118_p2 | icmp_ln22_1_fu_124_p2);

assign out_data_V_TDATA_int_regslice = {{select_ln174_1_fu_175_p3}, {select_ln174_fu_164_p3}};

assign out_data_V_TVALID = regslice_both_out_data_V_U_vld_out;

assign select_ln174_1_fu_175_p3 = ((icmp_ln22_2_reg_214_pp0_iter2_reg[0:0] == 1'b1) ? 32'd0 : bitcast_ln174_fu_171_p1);

assign select_ln174_fu_164_p3 = ((icmp_ln22_2_reg_214_pp0_iter2_reg[0:0] == 1'b1) ? 32'd0 : bitcast_ln174_1_fu_160_p1);

assign select_ln22_1_fu_154_p3 = ((or_ln22_reg_208_pp0_iter2_reg[0:0] == 1'b1) ? tmp_M_value_reg_196_pp0_iter2_reg : grp_fu_78_p2);

assign select_ln22_fu_148_p3 = ((or_ln22_reg_208_pp0_iter2_reg[0:0] == 1'b1) ? tmp_M_value_1_reg_202_pp0_iter2_reg : grp_fu_83_p2);

assign tmp_M_value_1_fu_113_p1 = trunc_ln145_1_fu_103_p4;

assign tmp_M_value_fu_98_p1 = trunc_ln145_fu_94_p1;

assign trunc_ln145_1_fu_103_p4 = {{in_data_V_TDATA_int_regslice[63:32]}};

assign trunc_ln145_fu_94_p1 = in_data_V_TDATA_int_regslice[31:0];

endmodule //axi_analytic_fft
